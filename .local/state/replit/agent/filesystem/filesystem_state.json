{
  "file_contents": {
    "drizzle.config.ts": {
      "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
      "size_bytes": 325
    },
    "postcss.config.js": {
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "size_bytes": 80
    },
    "tailwind.config.ts": {
      "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: \"var(--success)\",\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
      "size_bytes": 2790
    },
    "vite.config.ts": {
      "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n",
      "size_bytes": 1080
    },
    "server/gemini.ts": {
      "content": "import { GoogleGenAI } from \"@google/genai\";\n\n// the newest Gemini model is \"gemini-2.5-flash\" - do not change this unless explicitly requested by the user\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY || \"\" \n});\n\ninterface DiagnosisResult {\n  name: string;\n  confidence: number;\n  description: string;\n  keyFeatures: string[];\n  recommendations: string[];\n}\n\ninterface AnalysisContext {\n  lesionLocation?: string;\n  medicalHistory?: string[];\n}\n\nexport async function analyzeWithGemini(\n  imageUrl: string,\n  symptoms: string,\n  context: AnalysisContext = {}\n): Promise<{\n  diagnoses: DiagnosisResult[];\n  analysisTime: number;\n}> {\n  const startTime = Date.now();\n\n  try {\n    // Import ObjectStorageService here to avoid circular dependencies\n    const { ObjectStorageService } = await import(\"./objectStorage\");\n    const objectStorageService = new ObjectStorageService();\n    \n    // Normalize the path and get the image file from object storage\n    const normalizedPath = objectStorageService.normalizeObjectEntityPath(imageUrl);\n    const file = await objectStorageService.getObjectEntityFile(normalizedPath);\n    \n    // Get image data and metadata directly from the file\n    const [imageBuffer] = await file.download();\n    const [metadata] = await file.getMetadata();\n    const imageBase64 = Buffer.from(imageBuffer).toString(\"base64\");\n    const mimeType = metadata.contentType || \"image/jpeg\";\n    \n    const systemPrompt = `You are an expert dermatologist AI assistant. Analyze the provided skin lesion image and patient information to provide differential diagnoses.\n\nConsider:\n- Visual characteristics of the lesion (color, shape, size, texture, borders)\n- Patient symptoms: ${symptoms}\n- Lesion location: ${context.lesionLocation || \"Not specified\"}\n- Medical history: ${context.medicalHistory?.join(\", \") || \"None specified\"}\n\nProvide exactly 5 differential diagnoses ranked by confidence level, with confidence scores between 0-100.\n\nRespond with JSON in this exact format:\n{\n  \"diagnoses\": [\n    {\n      \"name\": \"Diagnosis name\",\n      \"confidence\": 85,\n      \"description\": \"Brief clinical description\",\n      \"keyFeatures\": [\"Feature 1\", \"Feature 2\", \"Feature 3\"],\n      \"recommendations\": [\"Recommendation 1\", \"Recommendation 2\"]\n    }\n  ]\n}`;\n\n    const contents = [\n      {\n        inlineData: {\n          data: imageBase64,\n          mimeType: mimeType,\n        },\n      },\n      systemPrompt,\n    ];\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            diagnoses: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  confidence: { type: \"number\" },\n                  description: { type: \"string\" },\n                  keyFeatures: { type: \"array\", items: { type: \"string\" } },\n                  recommendations: { type: \"array\", items: { type: \"string\" } }\n                },\n                required: [\"name\", \"confidence\", \"description\", \"keyFeatures\", \"recommendations\"]\n              }\n            }\n          },\n          required: [\"diagnoses\"]\n        }\n      },\n      contents: contents,\n    });\n\n    const analysisTime = (Date.now() - startTime) / 1000;\n    const rawJson = response.text;\n\n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    const result = JSON.parse(rawJson);\n    \n    // Ensure we have exactly 5 diagnoses\n    const diagnoses = result.diagnoses.slice(0, 5);\n    \n    return {\n      diagnoses,\n      analysisTime\n    };\n  } catch (error) {\n    console.error(\"Gemini analysis failed:\", error);\n    throw new Error(`Gemini analysis failed: ${error}`);\n  }\n}\n",
      "size_bytes": 3903
    },
    "server/index.ts": {
      "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Replit Auth is now handled inside registerRoutes with isAuthenticated middleware\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
      "size_bytes": 2152
    },
    "server/objectAcl.ts": {
      "content": "import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n",
      "size_bytes": 5544
    },
    "server/objectStorage.ts": {
      "content": "import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: Error) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n",
      "size_bytes": 8415
    },
    "server/openai.ts": {
      "content": "import OpenAI from \"openai\";\n\n// Using GPT-5-mini as requested by user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"\" \n});\n\ninterface DiagnosisResult {\n  name: string;\n  confidence: number;\n  description: string;\n  keyFeatures: string[];\n  recommendations: string[];\n}\n\ninterface AnalysisContext {\n  lesionLocation?: string;\n  medicalHistory?: string[];\n}\n\nexport async function analyzeWithOpenAI(\n  imageUrl: string,\n  symptoms: string,\n  context: AnalysisContext = {}\n): Promise<{\n  diagnoses: DiagnosisResult[];\n  analysisTime: number;\n}> {\n  const startTime = Date.now();\n\n  try {\n    // Import ObjectStorageService here to avoid circular dependencies\n    const { ObjectStorageService } = await import(\"./objectStorage\");\n    const objectStorageService = new ObjectStorageService();\n    \n    // Normalize the path and get the image file from object storage\n    const normalizedPath = objectStorageService.normalizeObjectEntityPath(imageUrl);\n    const file = await objectStorageService.getObjectEntityFile(normalizedPath);\n    \n    // Get image data and metadata directly from the file\n    const [imageBuffer] = await file.download();\n    const [metadata] = await file.getMetadata();\n    const imageBase64 = Buffer.from(imageBuffer).toString(\"base64\");\n    const mimeType = metadata.contentType || \"image/jpeg\";\n\n    const systemPrompt = `You are an expert dermatologist AI assistant. Analyze the provided skin lesion image and patient information to provide differential diagnoses.\n\nConsider:\n- Visual characteristics of the lesion (color, shape, size, texture, borders)\n- Patient symptoms: ${symptoms}\n- Lesion location: ${context.lesionLocation || \"Not specified\"}\n- Medical history: ${context.medicalHistory?.join(\", \") || \"None specified\"}\n\nProvide exactly 5 differential diagnoses ranked by confidence level, with confidence scores between 0-100.\n\nRespond with JSON in this exact format:\n{\n  \"diagnoses\": [\n    {\n      \"name\": \"Diagnosis name\",\n      \"confidence\": 85,\n      \"description\": \"Brief clinical description\",\n      \"keyFeatures\": [\"Feature 1\", \"Feature 2\", \"Feature 3\"],\n      \"recommendations\": [\"Recommendation 1\", \"Recommendation 2\"]\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Please analyze this dermatological image and provide differential diagnoses based on the clinical information provided.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:${mimeType};base64,${imageBase64}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 2000,\n    });\n\n    const analysisTime = (Date.now() - startTime) / 1000;\n    const content = response.choices[0].message.content;\n\n    if (!content) {\n      throw new Error(\"Empty response from OpenAI\");\n    }\n\n    const result = JSON.parse(content);\n    \n    // Ensure we have exactly 5 diagnoses\n    const diagnoses = result.diagnoses.slice(0, 5);\n    \n    return {\n      diagnoses,\n      analysisTime\n    };\n  } catch (error) {\n    console.error(\"OpenAI analysis failed:\", error);\n    throw new Error(`OpenAI analysis failed: ${error}`);\n  }\n}\n",
      "size_bytes": 3497
    },
    "server/routes.ts": {
      "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { analyzeWithGemini } from \"./gemini\";\nimport { analyzeWithOpenAI } from \"./openai\";\nimport { insertPatientSchema, insertCaseSchema, updateUserSettingsSchema, updateUserProfileSchema } from \"@shared/schema\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { requireAdmin } from \"./middleware\";\nimport multer from \"multer\";\nimport PDFDocument from \"pdfkit\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware - setup Replit Auth\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n  \n  // Settings routes\n  app.get('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log(\"GET /api/settings - Authenticated user:\", req.user?.claims?.sub);\n      \n      const userId = req.user.claims.sub;\n      if (!userId) {\n        console.error(\"No userId found in authenticated user\");\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const settings = await storage.getUserSettings(userId);\n      console.log(\"Retrieved settings:\", settings);\n      \n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings - Full error:\", error);\n      \n      if (error instanceof Error) {\n        console.error(\"Error message:\", error.message);\n        console.error(\"Error stack:\", error.stack);\n      }\n      \n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log(\"PUT /api/settings - Request body:\", req.body);\n      console.log(\"Authenticated user:\", req.user?.claims?.sub);\n      \n      const userId = req.user.claims.sub;\n      if (!userId) {\n        console.error(\"No userId found in authenticated user\");\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const settingsData = updateUserSettingsSchema.parse(req.body);\n      console.log(\"Parsed settings data:\", settingsData);\n      \n      const updatedSettings = await storage.updateUserSettings(userId, settingsData);\n      console.log(\"Updated settings:\", updatedSettings);\n      \n      res.json(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating settings - Full error:\", error);\n      \n      if (error instanceof Error) {\n        console.error(\"Error message:\", error.message);\n        console.error(\"Error stack:\", error.stack);\n        \n        // Send more specific error message\n        return res.status(400).json({ \n          error: \"Failed to update settings\",\n          message: error.message,\n          details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n        });\n      }\n      \n      res.status(400).json({ error: \"Invalid settings data\" });\n    }\n  });\n  \n  // Profile routes\n  app.get('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const [profile, stats] = await Promise.all([\n        storage.getUserProfile(userId),\n        storage.getUserStatistics(userId)\n      ]);\n      \n      if (!profile) {\n        return res.status(404).json({ error: \"User profile not found\" });\n      }\n      \n      res.json({\n        ...profile,\n        statistics: stats\n      });\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n  \n  app.put('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = updateUserProfileSchema.parse(req.body);\n      const updatedProfile = await storage.updateUserProfile(userId, profileData);\n      \n      // Also return the updated statistics\n      const stats = await storage.getUserStatistics(userId);\n      \n      res.json({\n        ...updatedProfile,\n        statistics: stats\n      });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(400).json({ error: \"Invalid profile data\" });\n    }\n  });\n  \n  app.get('/api/profile/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserStatistics(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching statistics:\", error);\n      res.status(500).json({ error: \"Failed to fetch statistics\" });\n    }\n  });\n  \n  // Admin routes\n  app.get('/api/admin/cases', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const cases = await storage.getAllCasesForAdmin();\n      res.json(cases);\n    } catch (error) {\n      console.error(\"Error fetching admin cases:\", error);\n      res.status(500).json({ error: \"Failed to fetch cases\" });\n    }\n  });\n  \n  app.get('/api/admin/stats', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const stats = await storage.getSystemStatistics();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching system statistics:\", error);\n      res.status(500).json({ error: \"Failed to fetch statistics\" });\n    }\n  });\n  \n  // User management endpoints\n  app.get('/api/admin/users', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/admin/users/:userId/promote', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const updatedUser = await storage.promoteUserToAdmin(userId);\n      res.json({ \n        message: `User ${updatedUser.email} promoted to admin`,\n        user: updatedUser \n      });\n    } catch (error) {\n      console.error(\"Error promoting user to admin:\", error);\n      res.status(500).json({ error: \"Failed to promote user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:userId/demote', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const updatedUser = await storage.demoteUserFromAdmin(userId);\n      res.json({ \n        message: `User ${updatedUser.email} demoted from admin`,\n        user: updatedUser \n      });\n    } catch (error) {\n      console.error(\"Error demoting user from admin:\", error);\n      res.status(500).json({ error: \"Failed to demote user\" });\n    }\n  });\n\n  // Legacy endpoint for backward compatibility\n  app.post('/api/admin/promote/:userId', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const updatedUser = await storage.promoteUserToAdmin(userId);\n      res.json({ \n        message: `User ${updatedUser.email} promoted to admin`,\n        user: updatedUser \n      });\n    } catch (error) {\n      console.error(\"Error promoting user to admin:\", error);\n      res.status(500).json({ error: \"Failed to promote user\" });\n    }\n  });\n  \n  // Helper function to map duration values to Turkish display text\n  const mapDurationToTurkish = (duration: string | null): string => {\n    const durationMap: { [key: string]: string } = {\n      \"less-than-1-day\": \"1 günden az\",\n      \"1-7-days\": \"1-7 gün\", \n      \"1-4-weeks\": \"1-4 hafta\",\n      \"1-6-months\": \"1-6 ay\",\n      \"more-than-6-months\": \"6 aydan fazla\"\n    };\n    \n    if (!duration) return 'Belirtilmedi';\n    return durationMap[duration] || duration;\n  };\n\n  // Helper function to sanitize CSV fields against formula injection\n  const sanitizeCSVFormula = (value: string | null | undefined): string => {\n    if (!value) return '';\n    const strValue = String(value);\n    \n    // Check if the value starts with dangerous formula characters\n    if (strValue.startsWith('=') || strValue.startsWith('+') || \n        strValue.startsWith('-') || strValue.startsWith('@')) {\n      // Prefix with single quote to neutralize formula execution\n      return `'${strValue}`;\n    }\n    return strValue;\n  };\n\n  // Helper function to format symptoms array for CSV\n  const formatSymptomsForCSV = (symptoms: string[] | null): string => {\n    if (!symptoms || symptoms.length === 0) return 'Yok';\n    // Sanitize each symptom before joining\n    const sanitizedSymptoms = symptoms.map(symptom => sanitizeCSVFormula(symptom));\n    return sanitizedSymptoms.join(', ');\n  };\n\n  app.get('/api/admin/export/cases', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const cases = await storage.getAllCasesForAdmin();\n      \n      // Get patient data for each case that has a patientId\n      const patientMap = new Map();\n      const patientIds = Array.from(new Set(cases.filter(c => c.patientId).map(c => c.patientId!)));\n      \n      for (const patientId of patientIds) {\n        try {\n          const patient = await storage.getPatientByPatientId(patientId!);\n          if (patient) {\n            patientMap.set(patientId, patient);\n          }\n        } catch (error) {\n          console.error(`Error fetching patient ${patientId}:`, error);\n        }\n      }\n      \n      // Create CSV content with Turkish headers including patient demographics\n      const csvHeaders = [\n        'Vaka ID', \n        'Kullanıcı Email', \n        'Hasta ID',\n        'Yaş',\n        'Cinsiyet', \n        'Durum', \n        'Oluşturma Tarihi', \n        'Ana Teşhis', \n        'Güven Oranı', \n        'Acil mi',\n        'Belirtiler',\n        'Ek Belirtiler', \n        'Belirti Süresi'\n      ];\n      \n      const csvRows = cases.map(c => {\n        const topDiagnosis = c.finalDiagnoses && c.finalDiagnoses[0] ? c.finalDiagnoses[0] : null;\n        const patient = c.patientId ? patientMap.get(c.patientId) : null;\n        \n        return [\n          c.caseId,\n          sanitizeCSVFormula(c.user?.email) || 'Bilinmiyor',\n          c.patientId || 'Yok',\n          patient?.age ? patient.age.toString() : 'Belirtilmedi',\n          patient?.gender ? sanitizeCSVFormula(patient.gender) : 'Belirtilmedi',\n          c.status === 'pending' ? 'Beklemede' : c.status === 'completed' ? 'Tamamlandı' : c.status,\n          c.createdAt ? new Date(c.createdAt).toLocaleDateString('tr-TR') : 'Yok',\n          sanitizeCSVFormula(topDiagnosis?.name) || 'Yok',\n          topDiagnosis?.confidence ? `%${topDiagnosis.confidence}` : 'Yok',\n          topDiagnosis?.isUrgent ? 'Evet' : 'Hayır',\n          formatSymptomsForCSV(c.symptoms as string[]),\n          sanitizeCSVFormula(c.additionalSymptoms) || 'Yok',\n          mapDurationToTurkish(c.symptomDuration)\n        ];\n      });\n      \n      // Add UTF-8 BOM for proper Turkish character support\n      const BOM = '\\uFEFF';\n      \n      // Combine headers and rows with proper CSV escaping\n      const csvContent = BOM + [\n        csvHeaders.join(','),\n        ...csvRows.map(row => row.map(cell => {\n          // Properly escape CSV values containing commas, quotes, or newlines\n          const cellStr = String(cell || '');\n          if (cellStr.includes(',') || cellStr.includes('\"') || cellStr.includes('\\n')) {\n            return `\"${cellStr.replace(/\"/g, '\"\"')}\"`;\n          }\n          return cellStr;\n        }).join(','))\n      ].join('\\n');\n      \n      // Set response headers for CSV download with UTF-8 charset\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"vaka-disa-aktarimi-${new Date().toISOString().split('T')[0]}.csv\"`);\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n      res.send(csvContent);\n      \n    } catch (error) {\n      console.error(\"Error exporting cases:\", error);\n      res.status(500).json({ error: \"Failed to export cases\" });\n    }\n  });\n\n  // Admin delete case endpoint\n  app.delete('/api/admin/cases/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const caseId = req.params.id;\n      \n      // Verify case exists before deletion\n      const existingCase = await storage.getCaseForAdmin(caseId);\n      if (!existingCase) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      const success = await storage.deleteCase(caseId);\n      \n      if (success) {\n        res.json({ message: `Case ${existingCase.caseId} deleted successfully` });\n      } else {\n        res.status(500).json({ error: \"Failed to delete case\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting case:\", error);\n      res.status(500).json({ error: \"Failed to delete case\" });\n    }\n  });\n\n  // Admin delete user endpoint\n  app.delete('/api/admin/users/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userId = req.params.id;\n      const adminUserId = req.user.claims.sub;\n      \n      // Prevent admin from deleting themselves\n      if (userId === adminUserId) {\n        return res.status(400).json({ error: \"Cannot delete your own account\" });\n      }\n      \n      // Verify user exists before deletion\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const success = await storage.deleteUser(userId);\n      \n      if (success) {\n        res.json({ message: `User ${existingUser.email} deleted successfully` });\n      } else {\n        res.status(500).json({ error: \"Failed to delete user\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n  \n  // Object storage routes\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      return res.sendStatus(404);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Patient management\n  app.post(\"/api/patients\", async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      const patient = await storage.createPatient(patientData);\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error creating patient:\", error);\n      res.status(400).json({ error: \"Invalid patient data\" });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId\", async (req, res) => {\n    try {\n      const patient = await storage.getPatientByPatientId(req.params.patientId);\n      if (!patient) {\n        return res.status(404).json({ error: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error fetching patient:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Case management and AI analysis\n  app.post(\"/api/cases/analyze\", isAuthenticated, async (req: any, res) => {\n    try {\n      const caseData = insertCaseSchema.parse(req.body);\n      \n      // Create case record with authenticated user\n      const userId = req.user.claims.sub;\n      const newCase = await storage.createCase(caseData, userId);\n      \n      // Start AI analysis in parallel\n      const symptomsString = Array.isArray(caseData.symptoms) \n        ? caseData.symptoms.join(\", \") \n        : (caseData.symptoms || \"\");\n      \n      const [geminiResult, openaiResult] = await Promise.allSettled([\n        analyzeWithGemini(caseData.imageUrl, symptomsString, {\n          lesionLocation: caseData.lesionLocation || undefined,\n          medicalHistory: (caseData.medicalHistory as string[]) || undefined\n        }),\n        analyzeWithOpenAI(caseData.imageUrl, symptomsString, {\n          lesionLocation: caseData.lesionLocation || undefined,\n          medicalHistory: (caseData.medicalHistory as string[]) || undefined\n        })\n      ]);\n\n      let geminiAnalysis = null;\n      let openaiAnalysis = null;\n\n      if (geminiResult.status === \"fulfilled\") {\n        geminiAnalysis = geminiResult.value;\n      } else {\n        console.error(\"Gemini analysis failed:\", geminiResult.reason);\n      }\n\n      if (openaiResult.status === \"fulfilled\") {\n        openaiAnalysis = openaiResult.value;\n      } else {\n        console.error(\"OpenAI analysis failed:\", openaiResult.reason);\n      }\n\n      // Combine and rank diagnoses\n      const finalDiagnoses = combineAnalyses(geminiAnalysis, openaiAnalysis);\n      \n      // Update case with analysis results\n      const updatedCase = await storage.updateCase(newCase.id, userId, {\n        geminiAnalysis,\n        openaiAnalysis,\n        finalDiagnoses,\n        status: \"completed\"\n      });\n\n      res.json(updatedCase);\n    } catch (error) {\n      console.error(\"Error analyzing case:\", error);\n      res.status(500).json({ error: \"Analysis failed\" });\n    }\n  });\n\n  app.get(\"/api/cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Only return cases owned by the authenticated user\n      const userId = req.user.claims.sub;\n      const cases = await storage.getCases(userId);\n      res.json(cases);\n    } catch (error) {\n      console.error(\"Error fetching cases:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/cases/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const caseRecord = await storage.getCase(req.params.id, userId);\n      if (!caseRecord) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      res.json(caseRecord);\n    } catch (error) {\n      console.error(\"Error fetching case:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // PDF report generation endpoint\n  app.post(\"/api/cases/:id/report\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const parameter = req.params.id;\n      \n      // Debug logging to track parameter types and lookup attempts\n      console.log(`[REPORT] Parameter received: \"${parameter}\", User: ${userId}`);\n      \n      // Check if user is admin\n      const user = await storage.getUser(userId);\n      const isAdmin = user && user.role === 'admin';\n      console.log(`[REPORT] User role: ${user?.role || 'unknown'}, Is admin: ${isAdmin}`);\n      \n      let caseRecord;\n      \n      // Determine if parameter is a caseId (starts with \"DR-\") or UUID\n      const isCaseId = parameter.startsWith('DR-');\n      console.log(`[REPORT] Parameter type detected: ${isCaseId ? 'caseId' : 'UUID id'}`);\n      \n      if (isAdmin) {\n        // Admins can access any case - try both lookup methods\n        if (isCaseId) {\n          console.log(`[REPORT] Admin lookup by caseId: ${parameter}`);\n          caseRecord = await storage.getCaseByCaseIdForAdmin(parameter);\n          \n          // Fallback to UUID lookup if caseId lookup fails\n          if (!caseRecord) {\n            console.log(`[REPORT] Admin caseId lookup failed, trying UUID lookup: ${parameter}`);\n            caseRecord = await storage.getCaseForAdmin(parameter);\n          }\n        } else {\n          console.log(`[REPORT] Admin lookup by UUID: ${parameter}`);\n          caseRecord = await storage.getCaseForAdmin(parameter);\n          \n          // Fallback to caseId lookup if UUID lookup fails\n          if (!caseRecord) {\n            console.log(`[REPORT] Admin UUID lookup failed, trying caseId lookup: ${parameter}`);\n            caseRecord = await storage.getCaseByCaseIdForAdmin(parameter);\n          }\n        }\n      } else {\n        // Regular users can only access their own cases - try both lookup methods\n        if (isCaseId) {\n          console.log(`[REPORT] User lookup by caseId: ${parameter}, userId: ${userId}`);\n          caseRecord = await storage.getCaseByCaseId(parameter, userId);\n          \n          // Fallback to UUID lookup if caseId lookup fails\n          if (!caseRecord) {\n            console.log(`[REPORT] User caseId lookup failed, trying UUID lookup: ${parameter}`);\n            caseRecord = await storage.getCase(parameter, userId);\n          }\n        } else {\n          console.log(`[REPORT] User lookup by UUID: ${parameter}, userId: ${userId}`);\n          caseRecord = await storage.getCase(parameter, userId);\n          \n          // Fallback to caseId lookup if UUID lookup fails\n          if (!caseRecord) {\n            console.log(`[REPORT] User UUID lookup failed, trying caseId lookup: ${parameter}`);\n            caseRecord = await storage.getCaseByCaseId(parameter, userId);\n          }\n        }\n      }\n      \n      console.log(`[REPORT] Case lookup result: ${caseRecord ? 'Found' : 'Not found'} for parameter: ${parameter}`);\n      \n      if (!caseRecord) {\n        console.log(`[REPORT] Case not found or access denied for parameter: ${parameter}, user: ${userId}`);\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      console.log(`[REPORT] Generating PDF for case: ${caseRecord.caseId} (UUID: ${caseRecord.id})`);\n    \n\n      // Create a new PDF document with explicit UTF-8 support\n      const doc = new PDFDocument({ \n        margin: 50,\n        bufferPages: true,\n        autoFirstPage: true,\n        compress: false // Disable compression to avoid encoding issues\n      });\n      \n      // Helper function to handle Turkish characters for PDF compatibility\n      const sanitizeTextForPDF = (text: string): string => {\n        if (!text) return '';\n        \n        // Turkish character mappings for PDF compatibility\n        const turkishCharMap: { [key: string]: string } = {\n          'ğ': 'g',\n          'Ğ': 'G', \n          'ü': 'u',\n          'Ü': 'U',\n          'ş': 's',\n          'Ş': 'S',\n          'ı': 'i',\n          'İ': 'I',\n          'ö': 'o',\n          'Ö': 'O',\n          'ç': 'c',\n          'Ç': 'C'\n        };\n        \n        return text.replace(/[ğĞüÜşŞıİöÖçÇ]/g, (match) => turkishCharMap[match] || match);\n      };\n      \n      // Configure font - try Unicode font first, fallback to Helvetica with character replacement\n      let useUnicodeFont = false;\n      try {\n        // Try to use a Unicode-capable font\n        doc.font('Helvetica-Bold');\n        useUnicodeFont = true;\n      } catch (error) {\n        // Fallback to standard Helvetica\n        console.warn('Using Helvetica with Turkish character replacement for PDF compatibility');\n        doc.font('Helvetica');\n        useUnicodeFont = false;\n      }\n      \n      // Set response headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"Case-Report-${caseRecord.caseId}.pdf\"`);\n      \n      // Pipe the PDF document to the response\n      doc.pipe(res);\n\n      // Add header\n      doc.fontSize(20)\n         .text(sanitizeTextForPDF('Medical Case Report'), { align: 'center' })\n         .moveDown(2);\n\n      // Case information\n      doc.fontSize(14)\n         .text(sanitizeTextForPDF(`Case ID: ${caseRecord.caseId}`), { continued: false })\n         .text(sanitizeTextForPDF(`Patient ID: ${caseRecord.patientId || 'N/A'}`))\n         .text(sanitizeTextForPDF(`Date: ${caseRecord.createdAt ? new Date(caseRecord.createdAt).toLocaleDateString() : 'N/A'}`))\n         .text(sanitizeTextForPDF(`Status: ${caseRecord.status}`))\n         .moveDown(1);\n\n      // Clinical information\n      doc.fontSize(16)\n         .text(sanitizeTextForPDF('Clinical Information'), { underline: true })\n         .moveDown(0.5);\n\n      doc.fontSize(12)\n         .text(sanitizeTextForPDF(`Lesion Location: ${caseRecord.lesionLocation || 'Not specified'}`))\n         .text(sanitizeTextForPDF(`Symptoms: ${Array.isArray(caseRecord.symptoms) ? caseRecord.symptoms.join(', ') : (caseRecord.symptoms || 'None reported')}`))\n         .text(sanitizeTextForPDF(`Additional Symptoms: ${caseRecord.additionalSymptoms || 'None reported'}`))\n         .text(sanitizeTextForPDF(`Symptom Duration: ${caseRecord.symptomDuration || 'Not specified'}`))\n         .moveDown(1);\n\n      // Medical history\n      if (caseRecord.medicalHistory && caseRecord.medicalHistory.length > 0) {\n        doc.text(sanitizeTextForPDF(`Medical History: ${caseRecord.medicalHistory.join(', ')}`))\n           .moveDown(1);\n      }\n\n      // AI Diagnosis Results\n      if (caseRecord.finalDiagnoses && caseRecord.finalDiagnoses.length > 0) {\n        doc.fontSize(16)\n           .text(sanitizeTextForPDF('AI Diagnosis Results'), { underline: true })\n           .moveDown(0.5);\n\n        caseRecord.finalDiagnoses.forEach((diagnosis, index) => {\n          doc.fontSize(12)\n             .text(sanitizeTextForPDF(`${index + 1}. ${diagnosis.name}`), { continued: false })\n             .fontSize(10)\n             .text(sanitizeTextForPDF(`   Confidence: ${diagnosis.confidence}%`))\n             .text(sanitizeTextForPDF(`   Description: ${diagnosis.description}`))\n             .moveDown(0.3);\n\n          if (diagnosis.keyFeatures && diagnosis.keyFeatures.length > 0) {\n            doc.text(sanitizeTextForPDF(`   Key Features: ${diagnosis.keyFeatures.join(', ')}`))\n               .moveDown(0.3);\n          }\n\n          if (diagnosis.recommendations && diagnosis.recommendations.length > 0) {\n            doc.text(sanitizeTextForPDF(`   Recommendations: ${diagnosis.recommendations.join(', ')}`))\n               .moveDown(0.3);\n          }\n\n          if (diagnosis.isUrgent) {\n            doc.fontSize(10)\n               .fillColor('red')\n               .text(sanitizeTextForPDF('   ⚠️ URGENT: Requires immediate medical attention'), { continued: false })\n               .fillColor('black')\n               .moveDown(0.5);\n          } else {\n            doc.moveDown(0.5);\n          }\n        });\n      }\n\n      // Add footer\n      doc.fontSize(8)\n         .text(sanitizeTextForPDF(`Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`), 50, doc.page.height - 50, { align: 'center' })\n         .text(sanitizeTextForPDF('This report is generated by AI analysis and should be reviewed by a qualified medical professional.'), { align: 'center' });\n\n      // Finalize the PDF\n      doc.end();\n      \n    } catch (error) {\n      console.error(\"Error generating PDF report:\", error);\n      res.status(500).json({ error: \"Failed to generate report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction combineAnalyses(geminiAnalysis: any, openaiAnalysis: any) {\n  const diagnoses = new Map();\n  \n  // Combine diagnoses from both models\n  if (geminiAnalysis?.diagnoses) {\n    geminiAnalysis.diagnoses.forEach((diagnosis: any) => {\n      const key = diagnosis.name.toLowerCase();\n      if (!diagnoses.has(key)) {\n        diagnoses.set(key, { ...diagnosis, sources: [] });\n      }\n      diagnoses.get(key).sources.push({ model: \"gemini\", confidence: diagnosis.confidence });\n    });\n  }\n\n  if (openaiAnalysis?.diagnoses) {\n    openaiAnalysis.diagnoses.forEach((diagnosis: any) => {\n      const key = diagnosis.name.toLowerCase();\n      if (!diagnoses.has(key)) {\n        diagnoses.set(key, { ...diagnosis, sources: [] });\n      }\n      diagnoses.get(key).sources.push({ model: \"openai\", confidence: diagnosis.confidence });\n    });\n  }\n\n  // Calculate combined confidence and rank\n  const finalDiagnoses = Array.from(diagnoses.values()).map((diagnosis: any, index) => {\n    const avgConfidence = diagnosis.sources.reduce((sum: number, source: any) => sum + source.confidence, 0) / diagnosis.sources.length;\n    \n    // Boost confidence if both models agree\n    const consensusBoost = diagnosis.sources.length > 1 ? 1.1 : 1.0;\n    const finalConfidence = Math.min(100, Math.round(avgConfidence * consensusBoost));\n    \n    // Determine urgency based on diagnosis name and confidence\n    const urgentConditions = [\"melanoma\", \"basal cell carcinoma\", \"squamous cell carcinoma\"];\n    const isUrgent = urgentConditions.some(condition => \n      diagnosis.name.toLowerCase().includes(condition.toLowerCase())\n    ) && finalConfidence > 25;\n\n    return {\n      rank: index + 1,\n      name: diagnosis.name,\n      confidence: finalConfidence,\n      description: diagnosis.description,\n      keyFeatures: diagnosis.keyFeatures || [],\n      recommendations: diagnosis.recommendations || [],\n      isUrgent\n    };\n  }).sort((a, b) => b.confidence - a.confidence).map((diagnosis, index) => ({\n    ...diagnosis,\n    rank: index + 1\n  }));\n\n  return finalDiagnoses.slice(0, 5); // Return top 5 diagnoses\n}\n",
      "size_bytes": 29588
    },
    "server/storage.ts": {
      "content": "import { \n  type Patient, \n  type InsertPatient, \n  type Case, \n  type InsertCase, \n  type User, \n  type UpsertUser,\n  type UserSettings,\n  type UpdateUserSettings,\n  type UpdateUserProfile,\n  patients,\n  cases,\n  users,\n  userSettings\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { nanoid } from \"nanoid\";\n\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Profile operations\n  getUserProfile(userId: string): Promise<User | undefined>;\n  updateUserProfile(userId: string, profileData: UpdateUserProfile): Promise<User>;\n  getUserStatistics(userId: string): Promise<{ totalCases: number; thisMonthCases: number; accuracyRate: number }>;\n  \n  // Patient operations\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  \n  // Case operations\n  createCase(caseData: InsertCase, userId: string): Promise<Case>;\n  getCase(id: string, userId: string): Promise<Case | undefined>;\n  getCaseForAdmin(id: string): Promise<Case | undefined>;\n  getCaseByCaseId(caseId: string, userId: string): Promise<Case | undefined>;\n  getCaseByCaseIdForAdmin(caseId: string): Promise<Case | undefined>;\n  getCases(userId: string): Promise<Case[]>;\n  updateCase(id: string, userId: string, updates: Partial<Case>): Promise<Case>;\n  deleteCase(id: string): Promise<boolean>;\n  \n  // Settings operations\n  getUserSettings(userId: string): Promise<UserSettings>;\n  updateUserSettings(userId: string, settings: UpdateUserSettings): Promise<UserSettings>;\n  \n  // Admin operations\n  getAllCasesForAdmin(): Promise<(Case & { user?: User })[]>;\n  getSystemStatistics(): Promise<{\n    totalCases: number;\n    pendingCases: number;\n    completedCases: number;\n    totalUsers: number;\n    activeUsers: number;\n    avgDiagnosisTime: number;\n  }>;\n  getAllUsers(): Promise<User[]>;\n  promoteUserToAdmin(userId: string): Promise<User>;\n  demoteUserFromAdmin(userId: string): Promise<User>;\n  deleteUser(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // Extract id from userData to avoid updating it during conflict resolution\n    const { id, ...updateData } = userData;\n    \n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...updateData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Profile operations\n  async getUserProfile(userId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user;\n  }\n\n  async updateUserProfile(userId: string, profileData: UpdateUserProfile): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        ...profileData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser;\n  }\n\n  async getUserStatistics(userId: string): Promise<{ totalCases: number; thisMonthCases: number; accuracyRate: number }> {\n    const userCases = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.userId, userId));\n    \n    const totalCases = userCases.length;\n    \n    // Calculate this month's cases\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const thisMonthCases = userCases.filter(c => {\n      if (!c.createdAt) return false;\n      const caseDate = new Date(c.createdAt);\n      return caseDate.getMonth() === currentMonth && caseDate.getFullYear() === currentYear;\n    }).length;\n    \n    // Calculate accuracy rate (simulated for now - would need feedback system)\n    // For now, we'll calculate based on confidence scores\n    let totalConfidence = 0;\n    let validCases = 0;\n    \n    userCases.forEach(c => {\n      if (c.finalDiagnoses && c.finalDiagnoses.length > 0) {\n        totalConfidence += c.finalDiagnoses[0].confidence;\n        validCases++;\n      }\n    });\n    \n    const accuracyRate = validCases > 0 ? Math.round(totalConfidence / validCases) : 0;\n    \n    return {\n      totalCases,\n      thisMonthCases,\n      accuracyRate\n    };\n  }\n\n  // Patient operations\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    // Add retry logic for patient ID uniqueness constraint violations\n    let attempts = 0;\n    const maxAttempts = 3;\n    \n    while (attempts < maxAttempts) {\n      try {\n        // If no patientId provided, generate a unique one\n        const patientData = {\n          ...insertPatient,\n          patientId: insertPatient.patientId || `PAT-${Date.now()}-${nanoid(8)}`\n        };\n        \n        const [patient] = await db\n          .insert(patients)\n          .values(patientData)\n          .returning();\n        return patient;\n      } catch (error: any) {\n        attempts++;\n        if (error.code === '23505' && error.constraint === 'patients_patient_id_unique') {\n          if (attempts < maxAttempts) {\n            console.log(`Patient ID collision detected for ID: ${insertPatient.patientId}, retrying (attempt ${attempts + 1}/${maxAttempts})`);\n            // Generate a new unique patient ID by appending timestamp and random string\n            insertPatient.patientId = `${insertPatient.patientId || 'PAT'}-${Date.now()}-${nanoid(6)}`;\n            continue;\n          } else {\n            throw new Error(`Patient ID '${insertPatient.patientId}' already exists. Please use a different patient ID.`);\n          }\n        }\n        throw error;\n      }\n    }\n    \n    throw new Error('Failed to create patient record after maximum attempts');\n  }\n\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient;\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.patientId, patientId));\n    return patient;\n  }\n\n  // Case operations  \n  async createCase(insertCase: InsertCase, userId: string): Promise<Case> {\n    // Generate truly unique case ID with timestamp and random component\n    const timestamp = Date.now();\n    const randomId = nanoid(8);\n    const year = new Date().getFullYear();\n    const caseId = `DR-${year}-${timestamp}-${randomId}`;\n    \n    // Add retry logic for unique constraint violations\n    let attempts = 0;\n    const maxAttempts = 3;\n    \n    while (attempts < maxAttempts) {\n      try {\n        const [caseRecord] = await db\n          .insert(cases)\n          .values({\n            caseId: attempts === 0 ? caseId : `DR-${year}-${Date.now()}-${nanoid(10)}`,\n            userId: userId,\n            patientId: insertCase.patientId || null,\n            imageUrl: insertCase.imageUrl,\n            lesionLocation: insertCase.lesionLocation || null,\n            symptoms: insertCase.symptoms || null,\n            additionalSymptoms: insertCase.additionalSymptoms || null,\n            symptomDuration: insertCase.symptomDuration || null,\n            medicalHistory: insertCase.medicalHistory || null,\n            geminiAnalysis: insertCase.geminiAnalysis || null,\n            openaiAnalysis: insertCase.openaiAnalysis || null,\n            finalDiagnoses: insertCase.finalDiagnoses || null,\n            status: \"pending\",\n          } as any)\n          .returning();\n        return caseRecord;\n      } catch (error: any) {\n        attempts++;\n        if (error.code === '23505' && error.constraint === 'cases_case_id_unique' && attempts < maxAttempts) {\n          console.log(`Case ID collision detected, retrying (attempt ${attempts + 1}/${maxAttempts})`);\n          // Add small delay before retry\n          await new Promise(resolve => setTimeout(resolve, 10));\n          continue;\n        }\n        throw error;\n      }\n    }\n    \n    throw new Error('Failed to create unique case ID after maximum attempts');\n  }\n\n  async getCase(id: string, userId: string): Promise<Case | undefined> {\n    const [caseRecord] = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.id, id));\n    \n    // Only return the case if it belongs to the requesting user\n    if (caseRecord && caseRecord.userId === userId) {\n      return caseRecord;\n    }\n    return undefined;\n  }\n\n  async getCaseForAdmin(id: string): Promise<Case | undefined> {\n    const [caseRecord] = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.id, id));\n    \n    return caseRecord;\n  }\n\n  async getCaseByCaseId(caseId: string, userId: string): Promise<Case | undefined> {\n    const [caseRecord] = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.caseId, caseId));\n    \n    // Only return the case if it belongs to the requesting user\n    if (caseRecord && caseRecord.userId === userId) {\n      return caseRecord;\n    }\n    return undefined;\n  }\n\n  async getCaseByCaseIdForAdmin(caseId: string): Promise<Case | undefined> {\n    const [caseRecord] = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.caseId, caseId));\n    \n    return caseRecord;\n  }\n\n  async getCases(userId: string): Promise<Case[]> {\n    const userCases = await db\n      .select()\n      .from(cases)\n      .where(eq(cases.userId, userId));\n    \n    return userCases.sort((a, b) => {\n      const aTime = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const bTime = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return bTime - aTime;\n    });\n  }\n\n  async updateCase(id: string, userId: string, updates: Partial<Case>): Promise<Case> {\n    // First check if case exists and belongs to user\n    const existingCase = await this.getCase(id, userId);\n    if (!existingCase) {\n      throw new Error(\"Case not found or unauthorized\");\n    }\n    \n    const [updatedCase] = await db\n      .update(cases)\n      .set(updates)\n      .where(eq(cases.id, id))\n      .returning();\n    \n    return updatedCase;\n  }\n\n  async deleteCase(id: string): Promise<boolean> {\n    try {\n      const result = await db\n        .delete(cases)\n        .where(eq(cases.id, id));\n      \n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      console.error(\"Error deleting case:\", error);\n      return false;\n    }\n  }\n\n  // Settings operations\n  async getUserSettings(userId: string): Promise<UserSettings> {\n    console.log(\"getUserSettings called with userId:\", userId);\n    \n    try {\n      const [settings] = await db\n        .select()\n        .from(userSettings)\n        .where(eq(userSettings.userId, userId));\n      \n      console.log(\"Fetched settings:\", settings);\n      \n      // If no settings exist, create default settings\n      if (!settings) {\n        console.log(\"No settings found, creating defaults for userId:\", userId);\n        \n        const [newSettings] = await db\n          .insert(userSettings)\n          .values({\n            userId,\n            useGemini: true,\n            useOpenAI: true,\n            confidenceThreshold: 40,\n            autoSaveCases: true,\n            anonymizeData: false,\n            dataRetention: \"90\",\n            theme: \"system\",\n            compactMode: false,\n            analysisNotifications: true,\n            urgentAlerts: true,\n            soundNotifications: false,\n          })\n          .returning();\n        \n        console.log(\"Created new settings:\", newSettings);\n        return newSettings;\n      }\n      \n      return settings;\n    } catch (error) {\n      console.error(\"Error in getUserSettings:\", error);\n      throw error;\n    }\n  }\n\n  async updateUserSettings(userId: string, updates: UpdateUserSettings): Promise<UserSettings> {\n    console.log(\"updateUserSettings called with userId:\", userId, \"updates:\", updates);\n    \n    try {\n      // First ensure settings exist\n      await this.getUserSettings(userId);\n      \n      console.log(\"About to update settings for userId:\", userId);\n      \n      const [updatedSettings] = await db\n        .update(userSettings)\n        .set({\n          ...updates,\n          updatedAt: new Date(),\n        })\n        .where(eq(userSettings.userId, userId))\n        .returning();\n      \n      console.log(\"Updated settings result:\", updatedSettings);\n      \n      if (!updatedSettings) {\n        throw new Error(`Failed to update settings for userId: ${userId}`);\n      }\n      \n      return updatedSettings;\n    } catch (error) {\n      console.error(\"Error in updateUserSettings:\", error);\n      throw error;\n    }\n  }\n\n  // Admin operations\n  async getAllCasesForAdmin(): Promise<(Case & { user?: User })[]> {\n    // Get all cases with user information\n    const allCases = await db\n      .select()\n      .from(cases);\n    \n    // Get unique user IDs\n    const userIds = Array.from(new Set(allCases.map(c => c.userId)));\n    \n    // Create a map of users\n    const userMap = new Map<string, User>();\n    for (const userId of userIds) {\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      if (user) {\n        userMap.set(userId, user);\n      }\n    }\n    \n    // Combine cases with user information\n    const casesWithUsers = allCases.map(caseRecord => ({\n      ...caseRecord,\n      user: userMap.get(caseRecord.userId)\n    }));\n    \n    // Sort by creation date (newest first)\n    return casesWithUsers.sort((a, b) => {\n      const aTime = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const bTime = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return bTime - aTime;\n    });\n  }\n\n  async getSystemStatistics(): Promise<{\n    totalCases: number;\n    pendingCases: number;\n    completedCases: number;\n    totalUsers: number;\n    activeUsers: number;\n    avgDiagnosisTime: number;\n  }> {\n    const allCases = await db.select().from(cases);\n    const allUsers = await db.select().from(users);\n    \n    const totalCases = allCases.length;\n    const pendingCases = allCases.filter(c => c.status === 'pending').length;\n    const completedCases = allCases.filter(c => c.status === 'completed').length;\n    const totalUsers = allUsers.length;\n    \n    // Calculate active users (users who have created cases in the last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const recentCases = allCases.filter(c => {\n      if (!c.createdAt) return false;\n      return new Date(c.createdAt) > thirtyDaysAgo;\n    });\n    \n    const activeUserIds = new Set(recentCases.map(c => c.userId));\n    const activeUsers = activeUserIds.size;\n    \n    // Calculate average diagnosis time (time from case creation to completion)\n    let totalDiagnosisTime = 0;\n    let diagnosisCount = 0;\n    \n    for (const caseRecord of allCases) {\n      if (caseRecord.status === 'completed' && caseRecord.createdAt) {\n        // For now, we'll estimate diagnosis time as 5 minutes average\n        // In a real system, you'd track actual completion time\n        totalDiagnosisTime += 5;\n        diagnosisCount++;\n      }\n    }\n    \n    const avgDiagnosisTime = diagnosisCount > 0 ? Math.round(totalDiagnosisTime / diagnosisCount) : 0;\n    \n    return {\n      totalCases,\n      pendingCases,\n      completedCases,\n      totalUsers,\n      activeUsers,\n      avgDiagnosisTime\n    };\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db.select().from(users);\n    \n    // Sort by creation date (newest first) and role (admins first)\n    return allUsers.sort((a, b) => {\n      // First sort by role (admin users first)\n      if (a.role === 'admin' && b.role !== 'admin') return -1;\n      if (b.role === 'admin' && a.role !== 'admin') return 1;\n      \n      // Then sort by creation date (newest first)\n      const aTime = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const bTime = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return bTime - aTime;\n    });\n  }\n\n  async promoteUserToAdmin(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        role: 'admin',\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error('User not found');\n    }\n    \n    console.log(`[ADMIN] User ${updatedUser.email} (${userId}) promoted to admin role`);\n    return updatedUser;\n  }\n\n  async demoteUserFromAdmin(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        role: 'user',\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error('User not found');\n    }\n    \n    console.log(`[ADMIN] User ${updatedUser.email} (${userId}) demoted from admin role`);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    try {\n      // First delete user's cases\n      await db.delete(cases).where(eq(cases.userId, id));\n      \n      // Then delete user's settings\n      await db.delete(userSettings).where(eq(userSettings.userId, id));\n      \n      // Finally delete the user\n      const result = await db\n        .delete(users)\n        .where(eq(users.id, id));\n      \n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      return false;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
      "size_bytes": 17882
    },
    "server/vite.ts": {
      "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
      "size_bytes": 2263
    },
    "shared/schema.ts": {
      "content": "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\").notNull(), // user, admin\n  medicalLicenseNumber: varchar(\"medical_license_number\"),\n  specialization: varchar(\"specialization\"),\n  hospital: varchar(\"hospital\"),\n  yearsOfExperience: integer(\"years_of_experience\"),\n  phoneNumber: varchar(\"phone_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: text(\"patient_id\").notNull().unique(),\n  age: integer(\"age\"),\n  gender: text(\"gender\"),\n  skinType: text(\"skin_type\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cases = pgTable(\"cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: text(\"case_id\").notNull().unique(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  patientId: varchar(\"patient_id\").references(() => patients.id),\n  imageUrl: text(\"image_url\").notNull(),\n  lesionLocation: text(\"lesion_location\"),\n  symptoms: jsonb(\"symptoms\").$type<string[]>(),\n  additionalSymptoms: text(\"additional_symptoms\"),\n  symptomDuration: text(\"symptom_duration\"),\n  medicalHistory: jsonb(\"medical_history\").$type<string[]>(),\n  geminiAnalysis: jsonb(\"gemini_analysis\").$type<{\n    diagnoses: Array<{\n      name: string;\n      confidence: number;\n      description: string;\n      keyFeatures: string[];\n      recommendations: string[];\n    }>;\n    analysisTime: number;\n  }>(),\n  openaiAnalysis: jsonb(\"openai_analysis\").$type<{\n    diagnoses: Array<{\n      name: string;\n      confidence: number;\n      description: string;\n      keyFeatures: string[];\n      recommendations: string[];\n    }>;\n    analysisTime: number;\n  }>(),\n  finalDiagnoses: jsonb(\"final_diagnoses\").$type<Array<{\n    rank: number;\n    name: string;\n    confidence: number;\n    description: string;\n    keyFeatures: string[];\n    recommendations: string[];\n    isUrgent: boolean;\n  }>>(),\n  status: text(\"status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCaseSchema = createInsertSchema(cases).omit({\n  id: true,\n  caseId: true,\n  userId: true, // Set by server based on authenticated user\n  createdAt: true,\n  status: true,\n});\n\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\nexport type Case = typeof cases.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  role: true,\n});\n\nexport const updateUserProfileSchema = createInsertSchema(users).pick({\n  firstName: true,\n  lastName: true,\n  phoneNumber: true,\n  medicalLicenseNumber: true,\n  specialization: true,\n  hospital: true,\n  yearsOfExperience: true,\n}).partial();\n\nexport type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;\n\n// User settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id),\n  useGemini: jsonb(\"use_gemini\").default(true).$type<boolean>(),\n  useOpenAI: jsonb(\"use_openai\").default(true).$type<boolean>(),\n  confidenceThreshold: integer(\"confidence_threshold\").default(40),\n  autoSaveCases: jsonb(\"auto_save_cases\").default(true).$type<boolean>(),\n  anonymizeData: jsonb(\"anonymize_data\").default(false).$type<boolean>(),\n  dataRetention: text(\"data_retention\").default(\"90\"),\n  theme: text(\"theme\").default(\"system\"),\n  compactMode: jsonb(\"compact_mode\").default(false).$type<boolean>(),\n  analysisNotifications: jsonb(\"analysis_notifications\").default(true).$type<boolean>(),\n  urgentAlerts: jsonb(\"urgent_alerts\").default(true).$type<boolean>(),\n  soundNotifications: jsonb(\"sound_notifications\").default(false).$type<boolean>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserSettingsSchema = createInsertSchema(userSettings).partial().omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type UpdateUserSettings = z.infer<typeof updateUserSettingsSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\n",
      "size_bytes": 5778
    },
    "client/src/App.tsx": {
      "content": "import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/providers/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport Landing from \"@/pages/landing\";\nimport DiagnosisPage from \"@/pages/diagnosis\";\nimport CaseHistoryPage from \"@/pages/case-history\";\nimport SettingsPage from \"@/pages/settings\";\nimport ProfilePage from \"@/pages/profile\";\nimport AdminPage from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <>\n      <Header />\n      <Switch>\n        {isLoading || !isAuthenticated ? (\n          <Route path=\"/\" component={Landing} />\n        ) : (\n          <>\n            <Route path=\"/\" component={DiagnosisPage} />\n            <Route path=\"/diagnosis\" component={DiagnosisPage} />\n            <Route path=\"/case-history\" component={CaseHistoryPage} />\n            <Route path=\"/settings\" component={SettingsPage} />\n            <Route path=\"/profile\" component={ProfilePage} />\n            <Route path=\"/admin\" component={AdminPage} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n",
      "size_bytes": 1699
    },
    "client/src/index.css": {
      "content": "@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 20%, 18%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 20%, 18%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 20%, 18%);\n  --primary: hsl(198, 67%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(316, 45%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 15%, 45%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 20%, 18%);\n  --destructive: hsl(4, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(145, 60%, 42%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(198, 67%, 42%);\n  --chart-1: hsl(198, 67%, 42%);\n  --chart-2: hsl(145, 60%, 42%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 20%, 18%);\n  --sidebar-primary: hsl(198, 67%, 42%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 20%, 18%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(198, 67%, 42%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00), 0px 1px 2px -1px hsl(198, 67%, 42%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00), 0px 1px 2px -1px hsl(198, 67%, 42%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00), 0px 2px 4px -1px hsl(198, 67%, 42%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00), 0px 4px 6px -1px hsl(198, 67%, 42%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00), 0px 8px 10px -1px hsl(198, 67%, 42%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(198, 67%, 42%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(210, 20%, 8%);\n  --foreground: hsl(210, 40%, 95%);\n  --card: hsl(210, 20%, 10%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(210, 20%, 10%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(198, 67%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(316, 45%, 55%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 20%, 15%);\n  --muted-foreground: hsl(210, 15%, 55%);\n  --accent: hsl(210, 20%, 15%);\n  --accent-foreground: hsl(210, 40%, 95%);\n  --destructive: hsl(4, 85%, 65%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(145, 60%, 52%);\n  --border: hsl(210, 20%, 18%);\n  --input: hsl(210, 20%, 18%);\n  --ring: hsl(198, 67%, 52%);\n  --chart-1: hsl(198, 67%, 52%);\n  --chart-2: hsl(145, 60%, 52%);\n  --chart-3: hsl(42, 93%, 66%);\n  --chart-4: hsl(147, 78%, 52%);\n  --chart-5: hsl(341, 75%, 61%);\n  --sidebar: hsl(210, 20%, 10%);\n  --sidebar-foreground: hsl(210, 40%, 95%);\n  --sidebar-primary: hsl(198, 67%, 52%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 20%, 15%);\n  --sidebar-accent-foreground: hsl(210, 40%, 95%);\n  --sidebar-border: hsl(210, 20%, 18%);\n  --sidebar-ring: hsl(198, 67%, 52%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.05) 0%, hsl(var(--secondary) / 0.05) 100%);\n}\n\n.drag-zone {\n  transition: all 0.3s ease;\n}\n\n.drag-zone:hover {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.02);\n}\n\n.drag-zone.drag-over {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.05);\n  transform: scale(1.01);\n}\n\n.diagnosis-card {\n  transition: all 0.2s ease;\n}\n\n.diagnosis-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\n}\n\n.probability-bar {\n  height: 8px;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.loading-spinner {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n",
      "size_bytes": 4488
    },
    "client/src/main.tsx": {
      "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
      "size_bytes": 157
    },
    "client/src/components/CaseHistory.tsx": {
      "content": "import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { History, Eye, FileText, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Case } from \"@shared/schema\";\n\nexport function CaseHistory() {\n  const { data: cases = [], isLoading } = useQuery<Case[]>({\n    queryKey: [\"/api/cases\"],\n  });\n  const { toast } = useToast();\n  const [selectedCase, setSelectedCase] = useState<Case | null>(null);\n  const [isGeneratingReport, setIsGeneratingReport] = useState(false);\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return \"text-success\";\n    if (confidence >= 60) return \"text-foreground\";\n    return \"text-destructive\";\n  };\n\n  const formatDate = (date: Date | string | null | undefined) => {\n    if (!date) return \"N/A\";\n    const d = typeof date === \"string\" ? new Date(date) : date;\n    return d.toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border border-border shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-8 bg-muted rounded\"></div>\n              <div className=\"h-8 bg-muted rounded\"></div>\n              <div className=\"h-8 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"bg-card border border-border shadow-sm\">\n        <div className=\"px-6 py-4 border-b border-border\">\n          <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n            <History className=\"text-primary mr-2\" size={20} />\n            Recent Cases\n          </h3>\n        </div>\n        <CardContent className=\"p-6\">\n        {cases.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No cases found</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Case ID</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Date</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Patient ID</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Top Diagnosis</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Confidence</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {cases.map((caseRecord) => {\n                  const topDiagnosis = caseRecord.finalDiagnoses?.[0];\n                  return (\n                    <tr \n                      key={caseRecord.id} \n                      className=\"border-b border-border hover:bg-muted/20 transition-colors\"\n                      data-testid={`row-case-${caseRecord.caseId}`}\n                    >\n                      <td className=\"py-3 px-4 text-sm text-foreground font-mono\" data-testid={`text-case-id-${caseRecord.caseId}`}>\n                        {caseRecord.caseId}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`text-date-${caseRecord.caseId}`}>\n                        {formatDate(caseRecord.createdAt)}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-foreground\" data-testid={`text-patient-id-${caseRecord.caseId}`}>\n                        {caseRecord.patientId || \"N/A\"}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-foreground\" data-testid={`text-top-diagnosis-${caseRecord.caseId}`}>\n                        {topDiagnosis?.name || \"N/A\"}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm font-medium\" data-testid={`text-confidence-${caseRecord.caseId}`}>\n                        {topDiagnosis ? (\n                          <span className={getConfidenceColor(topDiagnosis.confidence)}>\n                            {topDiagnosis.confidence}%\n                          </span>\n                        ) : (\n                          \"N/A\"\n                        )}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:underline\"\n                            onClick={() => {\n                              setSelectedCase(caseRecord);\n                            }}\n                            data-testid={`button-view-${caseRecord.caseId}`}\n                          >\n                            <Eye size={14} className=\"mr-1\" />\n                            View\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-secondary hover:underline\"\n                            onClick={async () => {\n                              setIsGeneratingReport(true);\n                              try {\n                                const response = await fetch(`/api/cases/${caseRecord.id}/report`, {\n                                  method: 'POST',\n                                });\n                                \n                                if (response.ok) {\n                                  const blob = await response.blob();\n                                  const url = window.URL.createObjectURL(blob);\n                                  const a = document.createElement('a');\n                                  a.href = url;\n                                  a.download = `Case-Report-${caseRecord.caseId}.pdf`;\n                                  document.body.appendChild(a);\n                                  a.click();\n                                  window.URL.revokeObjectURL(url);\n                                  document.body.removeChild(a);\n                                  \n                                  toast({\n                                    title: \"Report Generated\",\n                                    description: `Medical report for case ${caseRecord.caseId} has been downloaded.`,\n                                  });\n                                } else {\n                                  throw new Error('Failed to generate report');\n                                }\n                              } catch (error) {\n                                toast({\n                                  title: \"Error\",\n                                  description: \"Failed to generate report. Please try again.\",\n                                  variant: \"destructive\",\n                                });\n                              } finally {\n                                setIsGeneratingReport(false);\n                              }\n                            }}\n                            data-testid={`button-report-${caseRecord.caseId}`}\n                          >\n                            {isGeneratingReport ? (\n                              <Download size={14} className=\"mr-1 animate-spin\" />\n                            ) : (\n                              <FileText size={14} className=\"mr-1\" />\n                            )}\n                            {isGeneratingReport ? \"Generating...\" : \"Report\"}\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n        \n        {cases.length > 0 && (\n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"ghost\"\n              className=\"text-primary hover:underline text-sm font-medium\"\n              data-testid=\"button-view-all-cases\"\n            >\n              View all cases →\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n    \n    {/* Case Detail Modal */}\n    <Dialog open={!!selectedCase} onOpenChange={() => setSelectedCase(null)}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Case Details - {selectedCase?.caseId}</DialogTitle>\n        </DialogHeader>\n        {selectedCase && (\n          <div className=\"space-y-6\">\n            {/* Case Info */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-semibold text-sm text-muted-foreground\">Case ID</h4>\n                <p className=\"font-mono\">{selectedCase.caseId}</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm text-muted-foreground\">Date</h4>\n                <p>{formatDate(selectedCase.createdAt)}</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm text-muted-foreground\">Patient ID</h4>\n                <p>{selectedCase.patientId}</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm text-muted-foreground\">Status</h4>\n                <Badge variant={selectedCase.status === 'completed' ? 'default' : 'secondary'}>\n                  {selectedCase.status}\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Diagnoses */}\n            {selectedCase.finalDiagnoses && selectedCase.finalDiagnoses.length > 0 && (\n              <div>\n                <h4 className=\"font-semibold mb-3\">AI Diagnosis Results</h4>\n                <div className=\"space-y-3\">\n                  {selectedCase.finalDiagnoses.slice(0, 3).map((diagnosis, index) => (\n                    <div key={index} className=\"border rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h5 className=\"font-medium\">{diagnosis.name}</h5>\n                        <Badge variant={diagnosis.confidence >= 80 ? 'default' : 'secondary'}>\n                          {diagnosis.confidence}%\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">{diagnosis.description}</p>\n                      {diagnosis.keyFeatures.length > 0 && (\n                        <div className=\"text-xs\">\n                          <span className=\"font-medium\">Key Features:</span> {diagnosis.keyFeatures.join(', ')}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n    </>\n  );\n}\n",
      "size_bytes": 11419
    },
    "client/src/components/DiagnosisResults.tsx": {
      "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bot, Brain, CheckCircle, AlertTriangle, Save, FileText, Plus } from \"lucide-react\";\nimport type { Case } from \"@shared/schema\";\n\ninterface DiagnosisResultsProps {\n  caseData: Case;\n  onSaveCase: () => void;\n  onGenerateReport: () => void;\n  onNewAnalysis: () => void;\n}\n\nexport function DiagnosisResults({ caseData, onSaveCase, onGenerateReport, onNewAnalysis }: DiagnosisResultsProps) {\n  const { finalDiagnoses, geminiAnalysis, openaiAnalysis } = caseData;\n\n  if (!finalDiagnoses || finalDiagnoses.length === 0) {\n    return (\n      <Card className=\"bg-card border border-border shadow-sm\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-primary border-t-transparent mx-auto mb-4\" data-testid=\"loading-spinner\"></div>\n          <p className=\"text-lg font-medium text-foreground mb-2\">Processing Analysis...</p>\n          <p className=\"text-sm text-muted-foreground\">AI models are analyzing the image and symptoms</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return \"text-success\";\n    if (confidence >= 60) return \"text-foreground\";\n    if (confidence >= 40) return \"text-muted-foreground\";\n    return \"text-destructive\";\n  };\n\n  const getConfidenceBarColor = (confidence: number) => {\n    if (confidence >= 80) return \"bg-success\";\n    if (confidence >= 60) return \"bg-foreground\";\n    if (confidence >= 40) return \"bg-muted-foreground\";\n    return \"bg-destructive\";\n  };\n\n  const getBorderColor = (rank: number, isUrgent: boolean) => {\n    if (rank === 1 && !isUrgent) return \"border-success/20 bg-gradient-to-r from-success/10 to-success/5\";\n    if (isUrgent) return \"border-destructive/20 bg-gradient-to-r from-destructive/10 to-destructive/5\";\n    return \"border-border bg-card\";\n  };\n\n  const consensus = geminiAnalysis && openaiAnalysis ? 94 : 0;\n\n  return (\n    <Card className=\"bg-card border border-border shadow-sm\">\n      {/* Analysis Header */}\n      <div className=\"px-6 py-4 border-b border-border bg-gradient-to-r from-primary/5 to-secondary/5\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-xl font-bold text-foreground flex items-center\">\n              <Bot className=\"text-primary mr-2\" size={24} />\n              AI Analysis Results\n            </h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">Dual AI model analysis completed</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {geminiAnalysis && (\n              <div className=\"flex items-center text-sm text-success\">\n                <CheckCircle size={16} className=\"mr-2\" />\n                Gemini 2.5 Flash\n              </div>\n            )}\n            {openaiAnalysis && (\n              <div className=\"flex items-center text-sm text-success\">\n                <CheckCircle size={16} className=\"mr-2\" />\n                ChatGPT-5\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <CardContent className=\"p-6\">\n        {/* Ranked Diagnoses */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-lg font-semibold text-foreground mb-4\">\n            Preliminary Diagnoses (Ranked by Confidence)\n          </h4>\n          \n          {finalDiagnoses.map((diagnosis, index) => (\n            <div \n              key={index}\n              className={`diagnosis-card rounded-lg p-4 transition-all duration-200 hover:translate-y-[-2px] hover:shadow-lg ${getBorderColor(diagnosis.rank, diagnosis.isUrgent)} border`}\n              data-testid={`diagnosis-card-${index + 1}`}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center mb-2\">\n                    <Badge \n                      variant={diagnosis.rank === 1 ? \"default\" : \"secondary\"}\n                      className={`mr-3 ${diagnosis.rank === 1 ? \"bg-success text-white\" : \"bg-muted text-muted-foreground\"}`}\n                    >\n                      {diagnosis.rank}\n                    </Badge>\n                    <h5 className=\"text-lg font-semibold text-foreground\" data-testid={`text-diagnosis-name-${index + 1}`}>\n                      {diagnosis.name}\n                    </h5>\n                    <span \n                      className={`ml-auto text-lg font-bold ${getConfidenceColor(diagnosis.confidence)}`}\n                      data-testid={`text-confidence-${index + 1}`}\n                    >\n                      {diagnosis.confidence}%\n                    </span>\n                  </div>\n                  <div className=\"probability-bar bg-muted h-2 rounded-full mb-3\">\n                    <div \n                      className={`h-full rounded-full ${getConfidenceBarColor(diagnosis.confidence)}`}\n                      style={{ width: `${diagnosis.confidence}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n              \n              <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-description-${index + 1}`}>\n                {diagnosis.description}\n              </p>\n              \n              {(diagnosis.keyFeatures.length > 0 || diagnosis.recommendations.length > 0) && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  {diagnosis.keyFeatures.length > 0 && (\n                    <div>\n                      <span className=\"font-medium text-foreground\">Key Features:</span>\n                      <ul className=\"text-muted-foreground mt-1 space-y-1\">\n                        {diagnosis.keyFeatures.map((feature, idx) => (\n                          <li key={idx}>• {feature}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  {diagnosis.recommendations.length > 0 && (\n                    <div>\n                      <span className=\"font-medium text-foreground\">Recommendations:</span>\n                      <ul className=\"text-muted-foreground mt-1 space-y-1\">\n                        {diagnosis.recommendations.map((rec, idx) => (\n                          <li key={idx}>• {rec}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {diagnosis.isUrgent && (\n                <div className=\"bg-destructive/10 border border-destructive/20 rounded-md p-3 text-sm mt-3\">\n                  <div className=\"flex items-center text-destructive\">\n                    <AlertTriangle size={16} className=\"mr-2\" />\n                    <span className=\"font-medium\">\n                      {diagnosis.confidence > 50 ? \"Immediate dermatological referral recommended\" : \"Requires professional evaluation\"}\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* AI Model Confidence Comparison */}\n        {(geminiAnalysis || openaiAnalysis) && (\n          <div className=\"mt-8 bg-muted/30 rounded-lg p-6\">\n            <h4 className=\"text-lg font-semibold text-foreground mb-4\">AI Model Consensus</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {geminiAnalysis && (\n                <div>\n                  <div className=\"flex items-center mb-3\">\n                    <Brain className=\"text-primary mr-2\" size={20} />\n                    <span className=\"font-medium text-foreground\">Gemini 2.5 Flash</span>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Top diagnosis confidence:</span>\n                      <span className=\"font-medium text-foreground\" data-testid=\"text-gemini-confidence\">\n                        {geminiAnalysis.diagnoses?.[0]?.confidence || 0}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Analysis time:</span>\n                      <span className=\"font-medium text-foreground\" data-testid=\"text-gemini-time\">\n                        {geminiAnalysis.analysisTime || 0}s\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {openaiAnalysis && (\n                <div>\n                  <div className=\"flex items-center mb-3\">\n                    <Bot className=\"text-secondary mr-2\" size={20} />\n                    <span className=\"font-medium text-foreground\">ChatGPT-5</span>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Top diagnosis confidence:</span>\n                      <span className=\"font-medium text-foreground\" data-testid=\"text-openai-confidence\">\n                        {openaiAnalysis.diagnoses?.[0]?.confidence || 0}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Analysis time:</span>\n                      <span className=\"font-medium text-foreground\" data-testid=\"text-openai-time\">\n                        {openaiAnalysis.analysisTime || 0}s\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n            {consensus > 0 && (\n              <div className=\"mt-4 p-4 bg-card rounded-md border border-border\">\n                <div className=\"flex items-center text-success\">\n                  <CheckCircle size={16} className=\"mr-2\" />\n                  <span className=\"font-medium\" data-testid=\"text-consensus\">\n                    High consensus between AI models ({consensus}% agreement)\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"mt-8 flex flex-wrap gap-4 pt-6 border-t border-border\">\n          <Button\n            onClick={onSaveCase}\n            className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-6 py-3 font-medium\"\n            data-testid=\"button-save-case\"\n          >\n            <Save size={16} className=\"mr-2\" />\n            Save Case\n          </Button>\n          <Button\n            onClick={onGenerateReport}\n            className=\"bg-secondary hover:bg-secondary/90 text-secondary-foreground px-6 py-3 font-medium\"\n            data-testid=\"button-generate-report\"\n          >\n            <FileText size={16} className=\"mr-2\" />\n            Generate Report\n          </Button>\n          <Button\n            onClick={onNewAnalysis}\n            variant=\"outline\"\n            className=\"border-border hover:bg-muted/50 text-foreground px-6 py-3 font-medium\"\n            data-testid=\"button-new-analysis\"\n          >\n            <Plus size={16} className=\"mr-2\" />\n            New Analysis\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 11534
    },
    "client/src/components/ImageUpload.tsx": {
      "content": "import { useState, useCallback } from \"react\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CloudUpload, Camera, Trash2 } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface ImageUploadProps {\n  onImageUploaded: (imageUrl: string) => void;\n  uploadedImage?: string;\n}\n\nexport function ImageUpload({ onImageUploaded, uploadedImage }: ImageUploadProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | undefined>(uploadedImage);\n\n  const handleGetUploadParameters = async () => {\n    const response = await fetch(\"/api/objects/upload\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    \n    if (!response.ok) {\n      throw new Error(\"Failed to get upload URL\");\n    }\n    \n    const { uploadURL } = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: uploadURL,\n    };\n  };\n\n  const handleComplete = useCallback((result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    setIsUploading(false);\n    \n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const imageUrl = uploadedFile.uploadURL;\n      \n      if (imageUrl) {\n        // Normalize the uploaded image URL for preview\n        const normalizedUrl = imageUrl.startsWith('https://storage.googleapis.com') \n          ? `/objects/${imageUrl.split('/.private/')[1]}`\n          : imageUrl;\n        setPreviewUrl(normalizedUrl);\n        onImageUploaded(imageUrl);\n      }\n    }\n  }, [onImageUploaded]);\n\n  const handleRemove = () => {\n    setPreviewUrl(undefined);\n    onImageUploaded(\"\");\n  };\n\n  return (\n    <Card className=\"bg-card border border-border shadow-sm\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Camera className=\"text-primary mr-2\" size={20} />\n          Lesion Image Upload\n        </h3>\n        \n        {!previewUrl ? (\n          <div className=\"drag-zone rounded-lg p-8 text-center border-2 border-dashed border-border hover:border-primary hover:bg-primary/5 transition-all duration-300\">\n            <div className=\"flex flex-col items-center\">\n              <CloudUpload className=\"text-4xl text-muted-foreground mb-4\" size={48} />\n              <p className=\"text-lg font-medium text-foreground mb-2\">Drop image here</p>\n              <p className=\"text-sm text-muted-foreground mb-4\">or click to browse files</p>\n              \n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760} // 10MB\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleComplete}\n                buttonClassName=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n              >\n                Select Image\n              </ObjectUploader>\n            </div>\n          </div>\n        ) : (\n          <div data-testid=\"image-preview\">\n            <img \n              src={previewUrl} \n              alt=\"Uploaded skin lesion for analysis\" \n              className=\"w-full h-48 object-cover rounded-lg border border-border\"\n              data-testid=\"img-uploaded-lesion\"\n            />\n            <div className=\"flex justify-between items-center mt-3\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-filename\">\n                lesion_image.jpg\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRemove}\n                className=\"text-destructive hover:text-destructive/80\"\n                data-testid=\"button-remove-image\"\n              >\n                <Trash2 size={16} className=\"mr-1\" />\n                Remove\n              </Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"bg-muted/50 rounded-md p-4 mt-4\">\n          <h4 className=\"font-medium text-foreground mb-2\">Image Guidelines</h4>\n          <ul className=\"text-sm text-muted-foreground space-y-1\">\n            <li>• High resolution (min 1000x1000px)</li>\n            <li>• Clear focus on lesion</li>\n            <li>• Good lighting conditions</li>\n            <li>• JPEG, PNG formats only</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 4497
    },
    "client/src/components/ObjectUploader.tsx": {
      "content": "import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/css/style.css\";\nimport \"@uppy/dashboard/css/style.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n",
      "size_bytes": 2857
    },
    "client/src/components/PatientForm.tsx": {
      "content": "import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { UserCheck, Brain } from \"lucide-react\";\n\ninterface PatientData {\n  patientId: string;\n  age: number | null;\n  gender: string;\n  skinType: string;\n  lesionLocation: string;\n  symptoms: string[];\n  additionalSymptoms: string;\n  symptomDuration: string;\n  medicalHistory: string[];\n}\n\ninterface PatientFormProps {\n  onSubmit: (data: PatientData) => void;\n  isLoading?: boolean;\n}\n\nexport function PatientForm({ onSubmit, isLoading = false }: PatientFormProps) {\n  const [formData, setFormData] = useState<PatientData>({\n    patientId: \"\",\n    age: null,\n    gender: \"\",\n    skinType: \"\",\n    lesionLocation: \"\",\n    symptoms: [],\n    additionalSymptoms: \"\",\n    symptomDuration: \"\",\n    medicalHistory: []\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const handleMedicalHistoryChange = (condition: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      medicalHistory: checked \n        ? [...prev.medicalHistory, condition]\n        : prev.medicalHistory.filter(item => item !== condition)\n    }));\n  };\n\n  const handleSymptomChange = (symptom: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      symptoms: checked \n        ? [...prev.symptoms, symptom]\n        : prev.symptoms.filter(item => item !== symptom)\n    }));\n  };\n\n  const dermatologicalSymptoms = [\n    \"Kaşıntı (itching)\",\n    \"Ağrı (pain)\",\n    \"Yanma hissi (burning sensation)\",\n    \"Kızarıklık (redness)\",\n    \"Şişlik (swelling)\",\n    \"Sızıntı/akıntı (discharge/oozing)\",\n    \"Kabuklanma (crusting)\",\n    \"Pullanma (scaling)\",\n    \"Kuruluk (dryness)\",\n    \"Hassasiyet (sensitivity)\",\n    \"Numbness/uyuşma\",\n    \"Sertlik (hardness)\"\n  ];\n\n  const symptomDurationOptions = [\n    { value: \"less-than-1-day\", label: \"1 günden az (Less than 1 day)\" },\n    { value: \"1-7-days\", label: \"1-7 gün (1-7 days)\" },\n    { value: \"1-4-weeks\", label: \"1-4 hafta (1-4 weeks)\" },\n    { value: \"1-6-months\", label: \"1-6 ay (1-6 months)\" },\n    { value: \"more-than-6-months\", label: \"6 aydan fazla (More than 6 months)\" }\n  ];\n\n  const medicalConditions = [\n    \"Previous skin cancer\",\n    \"Family history of melanoma\", \n    \"Immunosuppressive medications\",\n    \"Excessive sun exposure\"\n  ];\n\n  return (\n    <Card className=\"bg-card border border-border shadow-sm\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-6 flex items-center\">\n          <UserCheck className=\"text-primary mr-2\" size={20} />\n          Patient Information & Symptoms\n        </h3>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-patient-info\">\n          {/* Patient Demographics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"patientId\" className=\"text-sm font-medium text-foreground mb-2\">\n                Patient ID\n              </Label>\n              <Input\n                id=\"patientId\"\n                type=\"text\"\n                placeholder=\"Enter patient ID\"\n                value={formData.patientId}\n                onChange={(e) => setFormData(prev => ({ ...prev, patientId: e.target.value }))}\n                className=\"w-full\"\n                required\n                data-testid=\"input-patient-id\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"age\" className=\"text-sm font-medium text-foreground mb-2\">\n                Age\n              </Label>\n              <Input\n                id=\"age\"\n                type=\"number\"\n                placeholder=\"Patient age\"\n                value={formData.age || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, age: e.target.value ? parseInt(e.target.value) : null }))}\n                className=\"w-full\"\n                data-testid=\"input-age\"\n              />\n            </div>\n          </div>\n\n          {/* Gender and Skin Type */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2\">Gender</Label>\n              <Select \n                value={formData.gender} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, gender: value }))}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"select-gender\">\n                  <SelectValue placeholder=\"Select gender\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"male\">Male</SelectItem>\n                  <SelectItem value=\"female\">Female</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2\">Fitzpatrick Skin Type</Label>\n              <Select \n                value={formData.skinType} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, skinType: value }))}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"select-skin-type\">\n                  <SelectValue placeholder=\"Select skin type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"type1\">Type I (Very fair)</SelectItem>\n                  <SelectItem value=\"type2\">Type II (Fair)</SelectItem>\n                  <SelectItem value=\"type3\">Type III (Medium)</SelectItem>\n                  <SelectItem value=\"type4\">Type IV (Olive)</SelectItem>\n                  <SelectItem value=\"type5\">Type V (Brown)</SelectItem>\n                  <SelectItem value=\"type6\">Type VI (Black)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Lesion Location */}\n          <div>\n            <Label htmlFor=\"lesionLocation\" className=\"text-sm font-medium text-foreground mb-2\">\n              Lesion Location\n            </Label>\n            <Input\n              id=\"lesionLocation\"\n              type=\"text\"\n              placeholder=\"e.g., Left shoulder, Face, etc.\"\n              value={formData.lesionLocation}\n              onChange={(e) => setFormData(prev => ({ ...prev, lesionLocation: e.target.value }))}\n              className=\"w-full\"\n              data-testid=\"input-lesion-location\"\n            />\n          </div>\n\n          {/* Structured Symptoms Collection */}\n          <div className=\"space-y-6\">\n            {/* Common Dermatological Symptoms */}\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-4 block\">\n                Common Dermatological Symptoms / Yaygın Dermatolojik Semptomlar\n              </Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {dermatologicalSymptoms.map((symptom) => (\n                  <div key={symptom} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={symptom}\n                      checked={formData.symptoms.includes(symptom)}\n                      onCheckedChange={(checked) => handleSymptomChange(symptom, checked as boolean)}\n                      data-testid={`checkbox-symptom-${symptom.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                    />\n                    <Label\n                      htmlFor={symptom}\n                      className=\"text-sm text-foreground leading-5\"\n                    >\n                      {symptom}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Additional Symptoms */}\n            <div>\n              <Label htmlFor=\"additionalSymptoms\" className=\"text-sm font-medium text-foreground mb-2\">\n                Ek semptomlar ve açıklamalar (Additional symptoms and descriptions)\n              </Label>\n              <Textarea\n                id=\"additionalSymptoms\"\n                rows={3}\n                placeholder=\"Describe any additional symptoms, changes in size/color, other observations...\"\n                value={formData.additionalSymptoms}\n                onChange={(e) => setFormData(prev => ({ ...prev, additionalSymptoms: e.target.value }))}\n                className=\"w-full\"\n                data-testid=\"textarea-additional-symptoms\"\n              />\n            </div>\n\n            {/* Symptom Duration */}\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2\">\n                Semptom Süresi (Symptom Duration)\n              </Label>\n              <Select \n                value={formData.symptomDuration} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, symptomDuration: value }))}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"select-symptom-duration\">\n                  <SelectValue placeholder=\"Select duration / Süre seçiniz\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {symptomDurationOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Medical History */}\n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2\">\n              Relevant Medical History\n            </Label>\n            <div className=\"space-y-3\">\n              {medicalConditions.map((condition) => (\n                <div key={condition} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={condition}\n                    checked={formData.medicalHistory.includes(condition)}\n                    onCheckedChange={(checked) => handleMedicalHistoryChange(condition, checked as boolean)}\n                    data-testid={`checkbox-${condition.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                  <Label\n                    htmlFor={condition}\n                    className=\"text-sm text-foreground\"\n                  >\n                    {condition}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"pt-4 border-t border-border\">\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground py-3 px-4 text-lg font-medium\"\n              disabled={isLoading || !formData.patientId}\n              data-testid=\"button-analyze\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2\"></div>\n                  Analyzing...\n                </div>\n              ) : (\n                <>\n                  <Brain className=\"mr-2\" size={20} />\n                  Analyze with AI Models\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 11690
    },
    "client/src/hooks/use-mobile.tsx": {
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "size_bytes": 565
    },
    "client/src/hooks/use-toast.ts": {
      "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "size_bytes": 3895
    },
    "client/src/lib/queryClient.ts": {
      "content": "import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n",
      "size_bytes": 1383
    },
    "client/src/lib/utils.ts": {
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "size_bytes": 166
    },
    "client/src/pages/diagnosis.tsx": {
      "content": "import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ImageUpload } from \"@/components/ImageUpload\";\nimport { PatientForm } from \"@/components/PatientForm\";\nimport { DiagnosisResults } from \"@/components/DiagnosisResults\";\nimport { CaseHistory } from \"@/components/CaseHistory\";\nimport { AnalysisProgress } from \"@/components/AnalysisProgress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Microscope, Bell, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Case } from \"@shared/schema\";\n\ninterface PatientData {\n  patientId: string;\n  age: number | null;\n  gender: string;\n  skinType: string;\n  lesionLocation: string;\n  symptoms: string[];\n  additionalSymptoms: string;\n  symptomDuration: string;\n  medicalHistory: string[];\n}\n\nexport default function DiagnosisPage() {\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>(\"\");\n  const [analysisResult, setAnalysisResult] = useState<Case | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: { patientData: PatientData; imageUrl: string }) => {\n      // First create/get patient\n      const patientResponse = await fetch(\"/api/patients\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data.patientData),\n      });\n      \n      if (!patientResponse.ok) {\n        throw new Error(\"Failed to create patient record\");\n      }\n      \n      const patient = await patientResponse.json();\n\n      // Then analyze the case\n      const caseData = {\n        patientId: patient.id,\n        imageUrl: data.imageUrl,\n        lesionLocation: data.patientData.lesionLocation,\n        symptoms: data.patientData.symptoms,\n        additionalSymptoms: data.patientData.additionalSymptoms,\n        symptomDuration: data.patientData.symptomDuration,\n        medicalHistory: data.patientData.medicalHistory,\n      };\n\n      const analysisResponse = await fetch(\"/api/cases/analyze\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(caseData),\n      });\n\n      if (!analysisResponse.ok) {\n        throw new Error(\"Failed to analyze case\");\n      }\n\n      return analysisResponse.json();\n    },\n    onSuccess: (data: Case) => {\n      setAnalysisResult(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      toast({\n        title: \"Analysis Complete\",\n        description: \"AI models have successfully analyzed the case.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Analysis failed:\", error);\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Unable to complete the analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFormSubmit = (patientData: PatientData) => {\n    if (!uploadedImageUrl) {\n      toast({\n        title: \"Image Required\",\n        description: \"Please upload a lesion image before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analyzeMutation.mutate({ patientData, imageUrl: uploadedImageUrl });\n  };\n\n  const handleSaveCase = () => {\n    toast({\n      title: \"Case Saved\",\n      description: \"Case has been saved to the database.\",\n    });\n  };\n\n  const handleGenerateReport = () => {\n    toast({\n      title: \"Report Generated\",\n      description: \"Medical report has been generated successfully.\",\n    });\n  };\n\n  const handleNewAnalysis = () => {\n    setUploadedImageUrl(\"\");\n    setAnalysisResult(null);\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center text-primary-foreground font-bold text-lg mr-3\">\n                  <Microscope size={20} />\n                </div>\n                <h1 className=\"text-xl font-bold text-foreground\">DermaAI</h1>\n                <span className=\"ml-2 text-sm text-muted-foreground font-medium\">Medical Support</span>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex space-x-6\">\n              <Link href=\"/\">\n                <a className=\"text-primary font-medium\" data-testid=\"link-diagnosis\">Diagnosis</a>\n              </Link>\n              <Link href=\"/case-history\">\n                <a className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-case-history\">Case History</a>\n              </Link>\n              <Link href=\"/settings\">\n                <a className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-settings\">Settings</a>\n              </Link>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground\" data-testid=\"button-alerts\">\n                <Bell size={16} className=\"mr-2\" />\n                Alerts\n              </Button>\n              <Link href=\"/profile\">\n                <a>\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium hover:opacity-80 transition-opacity cursor-pointer\" data-testid=\"button-profile\">\n                    <User size={16} />\n                  </div>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">Dermatological Diagnosis Support</h2>\n          <p className=\"text-muted-foreground\">AI-powered analysis of skin lesions using advanced machine learning models</p>\n        </div>\n\n        {/* Analysis Progress */}\n        {analyzeMutation.isPending && (\n          <div className=\"mb-8\">\n            <AnalysisProgress \n              isActive={analyzeMutation.isPending}\n              onComplete={() => {\n                // Progress animation completion will be handled by the mutation\n              }}\n            />\n          </div>\n        )}\n\n        {/* Diagnosis Workflow */}\n        {!analyzeMutation.isPending && !analysisResult && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Image Upload Section */}\n            <div className=\"lg:col-span-1\">\n              <ImageUpload \n                onImageUploaded={setUploadedImageUrl}\n                uploadedImage={uploadedImageUrl}\n              />\n            </div>\n\n            {/* Patient Information Form */}\n            <div className=\"lg:col-span-2\">\n              <PatientForm \n                onSubmit={handleFormSubmit}\n                isLoading={false}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* AI Analysis Results */}\n        {analysisResult && (\n          <div className=\"mt-8\">\n            <DiagnosisResults\n              caseData={analysisResult}\n              onSaveCase={handleSaveCase}\n              onGenerateReport={handleGenerateReport}\n              onNewAnalysis={handleNewAnalysis}\n            />\n          </div>\n        )}\n\n        {/* Case History */}\n        <div className=\"mt-8\">\n          <CaseHistory />\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-6 h-6 bg-primary rounded-md flex items-center justify-center text-primary-foreground font-bold text-sm mr-2\">\n                  <Microscope size={14} />\n                </div>\n                <span className=\"font-bold text-foreground\">DermaAI</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                AI-powered dermatological diagnosis support for medical professionals.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Legal</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Medical Disclaimer</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Contact Support</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Technical Requirements</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border mt-8 pt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 DermaAI. This tool is for medical professional use only and should not replace clinical judgment.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n",
      "size_bytes": 9867
    },
    "client/src/pages/not-found.tsx": {
      "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "size_bytes": 711
    },
    "client/src/components/ui/accordion.tsx": {
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "size_bytes": 1977
    },
    "client/src/components/ui/alert-dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "size_bytes": 4420
    },
    "client/src/components/ui/alert.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "size_bytes": 1584
    },
    "client/src/components/ui/aspect-ratio.tsx": {
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "size_bytes": 140
    },
    "client/src/components/ui/avatar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "size_bytes": 1419
    },
    "client/src/components/ui/badge.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "size_bytes": 1128
    },
    "client/src/components/ui/breadcrumb.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "size_bytes": 2712
    },
    "client/src/components/ui/button.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "size_bytes": 1901
    },
    "client/src/components/ui/calendar.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "size_bytes": 2695
    },
    "client/src/components/ui/card.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "size_bytes": 1858
    },
    "client/src/components/ui/carousel.tsx": {
      "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "size_bytes": 6210
    },
    "client/src/components/ui/chart.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "size_bytes": 10481
    },
    "client/src/components/ui/checkbox.tsx": {
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "size_bytes": 1056
    },
    "client/src/components/ui/collapsible.tsx": {
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "size_bytes": 329
    },
    "client/src/components/ui/command.tsx": {
      "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "size_bytes": 4885
    },
    "client/src/components/ui/context-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "size_bytes": 7428
    },
    "client/src/components/ui/dialog.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "size_bytes": 3848
    },
    "client/src/components/ui/drawer.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "size_bytes": 3021
    },
    "client/src/components/ui/dropdown-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "size_bytes": 7609
    },
    "client/src/components/ui/form.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "size_bytes": 4120
    },
    "client/src/components/ui/hover-card.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "size_bytes": 1251
    },
    "client/src/components/ui/input-otp.tsx": {
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "size_bytes": 2154
    },
    "client/src/components/ui/input.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/label.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "size_bytes": 710
    },
    "client/src/components/ui/menubar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "size_bytes": 8605
    },
    "client/src/components/ui/navigation-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "size_bytes": 5128
    },
    "client/src/components/ui/pagination.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
      "size_bytes": 2751
    },
    "client/src/components/ui/popover.tsx": {
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "size_bytes": 1280
    },
    "client/src/components/ui/progress.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/radio-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "size_bytes": 1467
    },
    "client/src/components/ui/resizable.tsx": {
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "size_bytes": 1723
    },
    "client/src/components/ui/scroll-area.tsx": {
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "size_bytes": 1642
    },
    "client/src/components/ui/select.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "size_bytes": 5742
    },
    "client/src/components/ui/separator.tsx": {
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "size_bytes": 756
    },
    "client/src/components/ui/sheet.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "size_bytes": 4281
    },
    "client/src/components/ui/sidebar.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
      "size_bytes": 23567
    },
    "client/src/components/ui/skeleton.tsx": {
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "size_bytes": 261
    },
    "client/src/components/ui/slider.tsx": {
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "size_bytes": 1077
    },
    "client/src/components/ui/switch.tsx": {
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "size_bytes": 1139
    },
    "client/src/components/ui/table.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "size_bytes": 2765
    },
    "client/src/components/ui/tabs.tsx": {
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "size_bytes": 1883
    },
    "client/src/components/ui/textarea.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "size_bytes": 689
    },
    "client/src/components/ui/toast.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "size_bytes": 4845
    },
    "client/src/components/ui/toaster.tsx": {
      "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "size_bytes": 772
    },
    "client/src/components/ui/toggle-group.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "size_bytes": 1753
    },
    "client/src/components/ui/toggle.tsx": {
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "size_bytes": 1527
    },
    "client/src/components/ui/tooltip.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "size_bytes": 1209
    },
    "replit.md": {
      "content": "# Overview\n\nThis is a dermatological AI analysis application that allows medical professionals to upload skin lesion images and receive AI-powered diagnostic insights. The system uses both Google's Gemini and OpenAI's models to analyze dermatological conditions, providing comprehensive diagnostic results with confidence scores, key features, and treatment recommendations.\n\nThe application is built as a full-stack web application with a React frontend and Express.js backend, designed to handle patient data management, image analysis, and case tracking for dermatological diagnosis workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design system\n- **Styling**: Tailwind CSS with CSS custom properties for theming and dark mode support\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **File Upload**: Uppy library with AWS S3 integration for direct-to-cloud uploads\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL as the primary database\n- **AI Integration**: Dual AI model approach using Google Gemini and OpenAI APIs for comparative analysis\n- **Object Storage**: Google Cloud Storage with Replit's sidecar service for file management\n- **Development**: Hot module replacement with Vite in development mode\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with three main entities:\n  - Users: Authentication and user management\n  - Patients: Patient demographic and medical information\n  - Cases: Diagnostic cases with image URLs, symptoms, medical history, and AI analysis results\n- **File Storage**: Google Cloud Storage for medical images with ACL-based access control\n- **Schema Management**: Drizzle Kit for database migrations and schema versioning\n\n## Authentication and Authorization\n- **Access Control**: Object-level ACL system with customizable access groups and permissions\n- **File Security**: Secure object storage with metadata-based access policies\n- **API Security**: Express middleware for request validation and error handling\n\n## External Dependencies\n- **AI Services**: \n  - Google Gemini API for medical image analysis\n  - OpenAI API for comparative diagnostic insights\n- **Cloud Services**:\n  - Google Cloud Storage for secure medical image storage\n  - Neon Database for managed PostgreSQL hosting\n- **Development Tools**:\n  - Replit-specific integrations for development environment\n  - ESBuild for production bundling\n  - TypeScript for type safety across the entire stack\n\nThe architecture emphasizes medical data security, AI model diversity for improved diagnostic accuracy, and a responsive user interface optimized for healthcare workflows. The dual AI approach provides cross-validation of diagnostic results, while the comprehensive data model supports full case management from patient intake through diagnosis and treatment recommendations.\n\n## Admin Panel Features\nThe application includes a comprehensive admin panel with role-based access control:\n- **Case Management**: View and export individual case reports with full patient details and AI analysis results\n- **User Management**: Complete user administration with promote/demote functionality for role management\n- **System Statistics**: Real-time analytics including total cases, active users, and system performance metrics\n- **Data Export**: CSV export capabilities for cases and comprehensive PDF reporting for individual diagnoses",
      "size_bytes": 3764
    },
    "client/src/pages/case-history.tsx": {
      "content": "import { CaseHistory } from \"@/components/CaseHistory\";\nimport { Link } from \"wouter\";\nimport { Microscope, History, User, Settings, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function CaseHistoryPage() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            <Link href=\"/\">\n              <a className=\"flex items-center space-x-2 hover:opacity-80 transition-opacity\">\n                <Microscope className=\"text-primary\" size={28} />\n                <span className=\"text-xl font-bold text-foreground\">DermaAI</span>\n              </a>\n            </Link>\n            \n            <nav className=\"hidden md:flex space-x-8\">\n              <Link href=\"/\">\n                <a className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\">\n                  Diagnosis\n                </a>\n              </Link>\n              <Link href=\"/case-history\">\n                <a className=\"text-sm font-medium text-foreground transition-colors\">\n                  Case History\n                </a>\n              </Link>\n              <Link href=\"/settings\">\n                <a className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\">\n                  Settings\n                </a>\n              </Link>\n            </nav>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-muted-foreground hover:text-foreground\">\n                <Bell size={20} />\n              </Button>\n              <Link href=\"/profile\">\n                <a>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"text-muted-foreground hover:text-foreground\">\n                    <User size={20} />\n                  </Button>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">Case History</h1>\n          <CaseHistory />\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-12\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 DermaAI. This tool is for medical professional use only and should not replace clinical judgment.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}",
      "size_bytes": 2871
    },
    "client/src/pages/profile.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Microscope, History, User, Settings, Bell, Mail, Phone, Calendar, MapPin, Award, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/Header\";\n\n// Form validation schema\nconst profileFormSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phoneNumber: z.string().optional(),\n  medicalLicenseNumber: z.string().optional(),\n  specialization: z.string().optional(),\n  hospital: z.string().optional(),\n  yearsOfExperience: z.coerce.number().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\n\nexport default function ProfilePage() {\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Fetch user profile and statistics\n  const { data: profile, isLoading, error } = useQuery({\n    queryKey: [\"/api/profile\"],\n  });\n\n  // Form setup\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n      medicalLicenseNumber: \"\",\n      specialization: \"\",\n      hospital: \"\",\n      yearsOfExperience: undefined,\n    },\n  });\n\n  // Update form when profile data loads\n  useEffect(() => {\n    if (profile) {\n      form.reset({\n        firstName: profile.firstName || \"\",\n        lastName: profile.lastName || \"\",\n        phoneNumber: profile.phoneNumber || \"\",\n        medicalLicenseNumber: profile.medicalLicenseNumber || \"\",\n        specialization: profile.specialization || \"\",\n        hospital: profile.hospital || \"\",\n        yearsOfExperience: profile.yearsOfExperience || undefined,\n      });\n    }\n  }, [profile, form]);\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: (updatedProfile) => {\n      queryClient.setQueryData([\"/api/profile\"], updatedProfile);\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handlePasswordChange = () => {\n    toast({\n      title: \"Coming soon\",\n      description: \"Password change functionality will be available soon.\",\n    });\n  };\n\n  const handleEnable2FA = () => {\n    toast({\n      title: \"Coming soon\",\n      description: \"Two-factor authentication will be available soon.\",\n    });\n  };\n\n  // Generate initials for avatar\n  const getInitials = () => {\n    if (profile?.firstName && profile?.lastName) {\n      return `${profile.firstName[0]}${profile.lastName[0]}`.toUpperCase();\n    } else if (profile?.email) {\n      return profile.email.substring(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <Header />\n        <main className=\"flex-1 container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground\">Failed to load profile data</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n\n      {/* Main Content */}\n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">User Profile</h1>\n          \n          <div className=\"grid gap-6 md:grid-cols-[300px_1fr]\">\n            {/* Profile Summary Card */}\n            <Card>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"flex flex-col items-center\">\n                    <Skeleton className=\"h-24 w-24 rounded-full mb-4\" />\n                    <Skeleton className=\"h-6 w-32 mb-2\" />\n                    <Skeleton className=\"h-4 w-24 mb-4\" />\n                    <Skeleton className=\"h-20 w-full\" />\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"flex flex-col items-center text-center\">\n                      <Avatar className=\"h-24 w-24 mb-4\">\n                        <AvatarImage src={profile?.profileImageUrl} alt=\"Profile\" />\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\" data-testid=\"avatar-fallback\">\n                          {getInitials()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <h3 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-username\">\n                        {profile?.firstName && profile?.lastName \n                          ? `${profile.firstName} ${profile.lastName}`\n                          : profile?.email || \"User\"}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-specialization\">\n                        {profile?.specialization || \"Medical Professional\"}\n                      </p>\n                      {profile?.medicalLicenseNumber && (\n                        <div className=\"flex items-center mt-3 text-sm text-muted-foreground\">\n                          <Award className=\"mr-1\" size={16} />\n                          <span data-testid=\"text-license\">{profile.medicalLicenseNumber}</span>\n                        </div>\n                      )}\n                      {profile?.hospital && (\n                        <div className=\"flex items-center mt-2 text-sm text-muted-foreground\">\n                          <MapPin className=\"mr-1\" size={16} />\n                          <span data-testid=\"text-hospital\">{profile.hospital}</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-6 space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Total Cases</span>\n                        <span className=\"font-medium text-foreground\" data-testid=\"text-total-cases\">\n                          {profile?.statistics?.totalCases || 0}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">This Month</span>\n                        <span className=\"font-medium text-foreground\" data-testid=\"text-month-cases\">\n                          {profile?.statistics?.thisMonthCases || 0}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Accuracy Rate</span>\n                        <span className=\"font-medium text-success\" data-testid=\"text-accuracy\">\n                          {profile?.statistics?.accuracyRate || 0}%\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Profile Details */}\n            <div className=\"space-y-6\">\n              <form onSubmit={form.handleSubmit(onSubmit)}>\n                {/* Personal Information */}\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle>Personal Information</CardTitle>\n                    <CardDescription>Update your personal details</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {isLoading ? (\n                      <>\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"first-name\">First Name</Label>\n                            <Input\n                              id=\"first-name\"\n                              {...form.register(\"firstName\")}\n                              disabled={!isEditing}\n                              data-testid=\"input-first-name\"\n                            />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"last-name\">Last Name</Label>\n                            <Input\n                              id=\"last-name\"\n                              {...form.register(\"lastName\")}\n                              disabled={!isEditing}\n                              data-testid=\"input-last-name\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"email\">Email</Label>\n                          <Input\n                            id=\"email\"\n                            type=\"email\"\n                            value={profile?.email || \"\"}\n                            disabled\n                            data-testid=\"input-email\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"phone\">Phone</Label>\n                          <Input\n                            id=\"phone\"\n                            type=\"tel\"\n                            {...form.register(\"phoneNumber\")}\n                            disabled={!isEditing}\n                            data-testid=\"input-phone\"\n                          />\n                        </div>\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Professional Information */}\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle>Professional Information</CardTitle>\n                    <CardDescription>Your medical credentials and specialization</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {isLoading ? (\n                      <>\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"license\">Medical License Number</Label>\n                          <Input\n                            id=\"license\"\n                            {...form.register(\"medicalLicenseNumber\")}\n                            disabled={!isEditing}\n                            data-testid=\"input-license\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"specialization\">Specialization</Label>\n                          <Input\n                            id=\"specialization\"\n                            {...form.register(\"specialization\")}\n                            disabled={!isEditing}\n                            data-testid=\"input-specialization\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"hospital\">Hospital/Clinic</Label>\n                          <Input\n                            id=\"hospital\"\n                            {...form.register(\"hospital\")}\n                            disabled={!isEditing}\n                            data-testid=\"input-hospital\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"experience\">Years of Experience</Label>\n                          <Input\n                            id=\"experience\"\n                            type=\"number\"\n                            {...form.register(\"yearsOfExperience\", { valueAsNumber: true })}\n                            disabled={!isEditing}\n                            data-testid=\"input-experience\"\n                          />\n                        </div>\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Save/Edit Buttons */}\n                <div className=\"flex justify-end gap-2\">\n                  {isEditing ? (\n                    <>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsEditing(false);\n                          form.reset();\n                        }}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"bg-primary hover:bg-primary/90\"\n                        disabled={updateProfileMutation.isPending}\n                        data-testid=\"button-save\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Saving...\n                          </>\n                        ) : (\n                          \"Save Changes\"\n                        )}\n                      </Button>\n                    </>\n                  ) : (\n                    <Button\n                      type=\"button\"\n                      onClick={() => setIsEditing(true)}\n                      className=\"bg-primary hover:bg-primary/90\"\n                      data-testid=\"button-edit\"\n                    >\n                      Edit Profile\n                    </Button>\n                  )}\n                </div>\n              </form>\n\n              {/* Account Security */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Security</CardTitle>\n                  <CardDescription>Manage your password and security settings</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={handlePasswordChange}\n                    data-testid=\"button-change-password\"\n                  >\n                    Change Password\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={handleEnable2FA}\n                    data-testid=\"button-enable-2fa\"\n                  >\n                    Enable Two-Factor Authentication\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-12\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 DermaAI. This tool is for medical professional use only and should not replace clinical judgment.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}",
      "size_bytes": 16771
    },
    "client/src/pages/settings.tsx": {
      "content": "import { Link } from \"wouter\";\nimport { Microscope, History, User, Settings, Bell, Shield, Key, Palette, Volume2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { useTheme } from \"@/providers/ThemeProvider\";\nimport type { UserSettings } from \"@shared/schema\";\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const { setTheme } = useTheme();\n  \n  // Fetch current settings\n  const { data: settings, isLoading } = useQuery<UserSettings>({\n    queryKey: ['/api/settings'],\n  });\n\n  // Local state for controlled components\n  const [formData, setFormData] = useState<Partial<UserSettings>>({\n    useGemini: true,\n    useOpenAI: true,\n    confidenceThreshold: 40,\n    autoSaveCases: true,\n    anonymizeData: false,\n    dataRetention: \"90\",\n    theme: \"system\",\n    compactMode: false,\n    analysisNotifications: true,\n    urgentAlerts: true,\n    soundNotifications: false,\n  });\n\n  // Update local state when settings are fetched\n  useEffect(() => {\n    if (settings) {\n      setFormData({\n        useGemini: settings.useGemini ?? true,\n        useOpenAI: settings.useOpenAI ?? true,\n        confidenceThreshold: settings.confidenceThreshold ?? 40,\n        autoSaveCases: settings.autoSaveCases ?? true,\n        anonymizeData: settings.anonymizeData ?? false,\n        dataRetention: settings.dataRetention ?? \"90\",\n        theme: settings.theme ?? \"system\",\n        compactMode: settings.compactMode ?? false,\n        analysisNotifications: settings.analysisNotifications ?? true,\n        urgentAlerts: settings.urgentAlerts ?? true,\n        soundNotifications: settings.soundNotifications ?? false,\n      });\n    }\n  }, [settings]);\n\n  // Save settings mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (data: Partial<UserSettings>) => {\n      const response = await apiRequest('PUT', '/api/settings', data);\n      return response.json();\n    },\n    onSuccess: (updatedSettings: UserSettings) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n      \n      // Apply theme immediately using ThemeProvider\n      setTheme(updatedSettings.theme as \"light\" | \"dark\" | \"system\" || \"system\");\n      \n      toast({\n        title: \"Settings saved\",\n        description: \"Your preferences have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Settings save error:\", error);\n      \n      // Extract error message from response\n      const errorMessage = error?.response?.data?.message || \n                          error?.response?.data?.error || \n                          error?.message || \n                          \"Failed to save settings. Please try again.\";\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sync theme from settings when they are loaded\n  useEffect(() => {\n    if (settings?.theme) {\n      setTheme(settings.theme as \"light\" | \"dark\" | \"system\");\n    }\n  }, [settings?.theme, setTheme]);\n\n  const handleSave = () => {\n    saveSettingsMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            <Link href=\"/\">\n              <a className=\"flex items-center space-x-2 hover:opacity-80 transition-opacity\" data-testid=\"link-home\">\n                <Microscope className=\"text-primary\" size={28} />\n                <span className=\"text-xl font-bold text-foreground\">DermaAI</span>\n              </a>\n            </Link>\n            \n            <nav className=\"hidden md:flex space-x-8\">\n              <Link href=\"/\">\n                <a className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-diagnosis\">\n                  Diagnosis\n                </a>\n              </Link>\n              <Link href=\"/case-history\">\n                <a className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-case-history\">\n                  Case History\n                </a>\n              </Link>\n              <Link href=\"/settings\">\n                <a className=\"text-sm font-medium text-foreground transition-colors\" data-testid=\"link-settings\">\n                  Settings\n                </a>\n              </Link>\n            </nav>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"button-notifications\">\n                <Bell size={20} />\n              </Button>\n              <Link href=\"/profile\">\n                <a>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"button-profile\">\n                    <User size={20} />\n                  </Button>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">Settings</h1>\n          \n          <div className=\"space-y-6\">\n            {/* AI Model Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"mr-2\" size={20} />\n                  AI Model Preferences\n                </CardTitle>\n                <CardDescription>Configure AI analysis settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"use-gemini\">Use Gemini 2.5 Flash</Label>\n                  <Switch \n                    id=\"use-gemini\" \n                    checked={formData.useGemini}\n                    onCheckedChange={(checked) => setFormData({...formData, useGemini: checked})}\n                    data-testid=\"switch-use-gemini\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"use-openai\">Use ChatGPT-5</Label>\n                  <Switch \n                    id=\"use-openai\" \n                    checked={formData.useOpenAI}\n                    onCheckedChange={(checked) => setFormData({...formData, useOpenAI: checked})}\n                    data-testid=\"switch-use-openai\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confidence-threshold\">Minimum Confidence Threshold (%)</Label>\n                  <Input \n                    type=\"number\" \n                    id=\"confidence-threshold\" \n                    value={formData.confidenceThreshold}\n                    onChange={(e) => setFormData({...formData, confidenceThreshold: parseInt(e.target.value) || 0})}\n                    min=\"0\" \n                    max=\"100\"\n                    data-testid=\"input-confidence-threshold\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Privacy Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"mr-2\" size={20} />\n                  Privacy & Security\n                </CardTitle>\n                <CardDescription>Manage data privacy and security settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"auto-save\">Auto-save cases</Label>\n                  <Switch \n                    id=\"auto-save\" \n                    checked={formData.autoSaveCases}\n                    onCheckedChange={(checked) => setFormData({...formData, autoSaveCases: checked})}\n                    data-testid=\"switch-auto-save\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"anonymize\">Anonymize patient data</Label>\n                  <Switch \n                    id=\"anonymize\"\n                    checked={formData.anonymizeData}\n                    onCheckedChange={(checked) => setFormData({...formData, anonymizeData: checked})}\n                    data-testid=\"switch-anonymize\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"retention\">Data retention period</Label>\n                  <Select \n                    value={formData.dataRetention}\n                    onValueChange={(value) => setFormData({...formData, dataRetention: value})}\n                  >\n                    <SelectTrigger id=\"retention\" data-testid=\"select-retention\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"30\">30 days</SelectItem>\n                      <SelectItem value=\"60\">60 days</SelectItem>\n                      <SelectItem value=\"90\">90 days</SelectItem>\n                      <SelectItem value=\"180\">180 days</SelectItem>\n                      <SelectItem value=\"365\">1 year</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Appearance Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Palette className=\"mr-2\" size={20} />\n                  Appearance\n                </CardTitle>\n                <CardDescription>Customize the application appearance</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"theme\">Theme</Label>\n                  <Select \n                    value={formData.theme}\n                    onValueChange={(value) => setFormData({...formData, theme: value})}\n                  >\n                    <SelectTrigger id=\"theme\" data-testid=\"select-theme\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\">Light</SelectItem>\n                      <SelectItem value=\"dark\">Dark</SelectItem>\n                      <SelectItem value=\"system\">System</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"compact-mode\">Compact mode</Label>\n                  <Switch \n                    id=\"compact-mode\"\n                    checked={formData.compactMode}\n                    onCheckedChange={(checked) => setFormData({...formData, compactMode: checked})}\n                    data-testid=\"switch-compact-mode\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Notification Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Volume2 className=\"mr-2\" size={20} />\n                  Notifications\n                </CardTitle>\n                <CardDescription>Configure notification preferences</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"analysis-complete\">Analysis complete notifications</Label>\n                  <Switch \n                    id=\"analysis-complete\" \n                    checked={formData.analysisNotifications}\n                    onCheckedChange={(checked) => setFormData({...formData, analysisNotifications: checked})}\n                    data-testid=\"switch-analysis-notifications\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"urgent-cases\">Urgent case alerts</Label>\n                  <Switch \n                    id=\"urgent-cases\" \n                    checked={formData.urgentAlerts}\n                    onCheckedChange={(checked) => setFormData({...formData, urgentAlerts: checked})}\n                    data-testid=\"switch-urgent-alerts\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"sound\">Sound notifications</Label>\n                  <Switch \n                    id=\"sound\"\n                    checked={formData.soundNotifications}\n                    onCheckedChange={(checked) => setFormData({...formData, soundNotifications: checked})}\n                    data-testid=\"switch-sound-notifications\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end pt-4\">\n              <Button \n                className=\"bg-primary hover:bg-primary/90\"\n                onClick={handleSave}\n                disabled={saveSettingsMutation.isPending}\n                data-testid=\"button-save-settings\"\n              >\n                {saveSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-12\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 DermaAI. This tool is for medical professional use only and should not replace clinical judgment.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}",
      "size_bytes": 15206
    },
    "server/db.ts": {
      "content": "import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n",
      "size_bytes": 483
    },
    "server/middleware.ts": {
      "content": "import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\n// Extend Express Request type to include user information\n// Note: This extends the passport user type, not our custom user type\ndeclare global {\n  namespace Express {\n    interface CustomUser {\n      id: string;\n      email: string | null;\n    }\n    interface Request {\n      customUser?: CustomUser;\n    }\n  }\n}\n\n// Authentication middleware - validates user session/token\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  console.log(\"[DEBUG] requireAuth middleware called for:\", req.method, req.path);\n  try {\n    // For now, we'll check for a simple Authorization header with userId\n    // In production, this should be a proper JWT token or session management\n    const authHeader = req.headers.authorization;\n    console.log(\"[DEBUG] Authorization header:\", authHeader);\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ \n        error: \"Authentication required\", \n        message: \"Please provide a valid authorization token\" \n      });\n    }\n\n    const userId = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    if (!userId) {\n      return res.status(401).json({ \n        error: \"Invalid token\", \n        message: \"Authorization token is malformed\" \n      });\n    }\n\n    // Verify user exists\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(401).json({ \n        error: \"Invalid token\", \n        message: \"User not found or token expired\" \n      });\n    }\n\n    // Attach user to request for use in route handlers\n    req.customUser = {\n      id: user.id,\n      email: user.email\n    };\n\n    // Log access for audit trail\n    logAccess(req, user.id, user.email || 'unknown');\n\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(500).json({ \n      error: \"Authentication failed\", \n      message: \"Internal server error during authentication\" \n    });\n  }\n}\n\n// Authorization middleware - verifies user owns the requested case OR is admin\nexport async function requireCaseOwnership(req: Request, res: Response, next: NextFunction) {\n  try {\n    if (!req.customUser) {\n      return res.status(401).json({ \n        error: \"Authentication required\", \n        message: \"User not authenticated\" \n      });\n    }\n\n    const caseId = req.params.id;\n    if (!caseId) {\n      return res.status(400).json({ \n        error: \"Invalid request\", \n        message: \"Case ID is required\" \n      });\n    }\n\n    // Get user to check role\n    const user = await storage.getUser(req.customUser.id);\n    \n    // If user is admin, allow access to any case\n    if (user && user.role === 'admin') {\n      // Log admin access attempt for audit trail\n      logAccess(req, req.customUser.id, req.customUser.email || 'unknown', `Admin accessed case ${caseId}`);\n      return next();\n    }\n\n    // For regular users, check if they own this case\n    const caseRecord = await storage.getCase(caseId, req.customUser.id);\n    \n    if (!caseRecord) {\n      // Don't reveal whether case exists or user doesn't have access\n      return res.status(403).json({ \n        error: \"Access denied\", \n        message: \"You do not have permission to access this case\" \n      });\n    }\n\n    // Log access attempt for audit trail\n    logAccess(req, req.customUser.id, req.customUser.email || 'unknown', `Accessed case ${caseId}`);\n\n    next();\n  } catch (error) {\n    console.error(\"Authorization error:\", error);\n    return res.status(500).json({ \n      error: \"Authorization failed\", \n      message: \"Internal server error during authorization\" \n    });\n  }\n}\n\n// Admin role check middleware - works with Replit Auth\nexport async function requireAdmin(req: Request & { user?: any }, res: Response, next: NextFunction) {\n  try {\n    // Check if user is authenticated via Replit Auth\n    if (!req.user || !req.user.claims) {\n      return res.status(401).json({ \n        error: \"Authentication required\", \n        message: \"Please login to access admin resources\" \n      });\n    }\n\n    const userId = req.user.claims.sub;\n    if (!userId) {\n      return res.status(401).json({ \n        error: \"Invalid authentication\", \n        message: \"User ID not found in authentication token\" \n      });\n    }\n\n    // Get user from storage to check role\n    const user = await storage.getUser(userId);\n    \n    if (!user || user.role !== 'admin') {\n      // Log unauthorized admin access attempt\n      console.log(`[SECURITY] Unauthorized admin access attempt by user: ${user?.email || 'unknown'} (${userId})`);\n      return res.status(403).json({ \n        error: \"Access denied\", \n        message: \"Admin privileges required to access this resource\" \n      });\n    }\n\n    // Log successful admin access\n    logAccess(req, userId, user.email || 'unknown', `Admin access to ${req.path}`);\n    \n    next();\n  } catch (error) {\n    console.error(\"Admin authorization error:\", error);\n    return res.status(500).json({ \n      error: \"Authorization failed\", \n      message: \"Internal server error during admin authorization\" \n    });\n  }\n}\n\n// Access logging for audit trail\nfunction logAccess(req: Request, userId: string, userEmail: string, additionalInfo?: string) {\n  const timestamp = new Date().toISOString();\n  const method = req.method;\n  const path = req.path;\n  const ip = req.ip || req.connection.remoteAddress || 'unknown';\n  const userAgent = req.headers['user-agent'] || 'unknown';\n  \n  const logEntry = {\n    timestamp,\n    userId,\n    userEmail,\n    method,\n    path,\n    ip,\n    userAgent,\n    additionalInfo\n  };\n\n  // Log to console for now - in production this should go to a secure audit log\n  console.log(`[AUDIT] ${timestamp} | User: ${userEmail} (${userId}) | ${method} ${path} | IP: ${ip} | ${additionalInfo || 'API access'}`);\n  \n  // TODO: In production, send to secure audit logging service\n  // auditLogger.log(logEntry);\n}\n\n// Middleware to log access attempts (including failed ones)\nexport function logAccessAttempt(req: Request, res: Response, next: NextFunction) {\n  const timestamp = new Date().toISOString();\n  const method = req.method;\n  const originalUrl = req.originalUrl; // Use originalUrl to handle Express mounting behavior\n  const ip = req.ip || req.connection.remoteAddress || 'unknown';\n  \n  // Log all access attempts to protected endpoints - originalUrl contains the full path\n  console.log(`[ACCESS_ATTEMPT] ${timestamp} | ${method} ${originalUrl} | IP: ${ip}`);\n  \n  next();\n}",
      "size_bytes": 6559
    },
    "server/replitAuth.ts": {
      "content": "import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  console.log(\"[AUTH] Setting up Replit authentication...\");\n  console.log(\"[AUTH] Using domains:\", process.env.REPLIT_DOMAINS);\n  \n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n  console.log(\"[AUTH] OIDC configuration loaded successfully\");\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n  \n  console.log(\"[AUTH] Authentication setup complete\");\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated()) {\n    console.log(\"[AUTH] User not authenticated - needs to login\");\n    return res.status(401).json({ message: \"Unauthorized - Please login first\" });\n  }\n\n  if (!user || !user.expires_at) {\n    console.log(\"[AUTH] User session invalid - missing expiration\");\n    return res.status(401).json({ message: \"Unauthorized - Session invalid\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    console.log(\"[AUTH] No refresh token available - user needs to re-login\");\n    res.status(401).json({ message: \"Unauthorized - Please login again\" });\n    return;\n  }\n\n  try {\n    console.log(\"[AUTH] Token expired - attempting refresh\");\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    console.log(\"[AUTH] Token refreshed successfully\");\n    return next();\n  } catch (error) {\n    console.error(\"[AUTH] Token refresh failed:\", error);\n    res.status(401).json({ message: \"Unauthorized - Token refresh failed\" });\n    return;\n  }\n};",
      "size_bytes": 5030
    },
    "client/src/components/Header.tsx": {
      "content": "import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Stethoscope, Home, Activity, History, Settings, User as UserIcon, LogOut, Shield } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"Diagnosis\", href: \"/diagnosis\", icon: Activity },\n    { name: \"Case History\", href: \"/case-history\", icon: History },\n    { name: \"Settings\", href: \"/settings\", icon: Settings },\n    { name: \"Profile\", href: \"/profile\", icon: UserIcon },\n  ];\n  \n  // Add admin link if user is admin\n  if (user?.role === \"admin\") {\n    navigation.push({ name: \"Admin\", href: \"/admin\", icon: Shield });\n  }\n\n  if (!isAuthenticated) {\n    return null; // Don't show header on landing page\n  }\n\n  return (\n    <header className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <a className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n                <Stethoscope className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n                <span className=\"text-xl font-bold text-gray-900 dark:text-white\">MedDiagnosis AI</span>\n              </a>\n            </Link>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <a\n                    className={`flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors\n                      ${location === item.href\n                        ? \"bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400\"\n                        : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                      }`}\n                    data-testid={`link-${item.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.name}</span>\n                  </a>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"relative h-10 w-10 rounded-full\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage \n                      src={user?.profileImageUrl || \"\"} \n                      alt={user?.firstName || \"User\"} \n                    />\n                    <AvatarFallback>\n                      {user?.firstName?.[0] || user?.email?.[0] || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\">\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\" data-testid=\"text-username\">\n                      {user?.firstName && user?.lastName \n                        ? `${user.firstName} ${user.lastName}`\n                        : user?.email || \"User\"}\n                    </p>\n                    <p className=\"text-xs leading-none text-muted-foreground\" data-testid=\"text-email\">\n                      {user?.email}\n                    </p>\n                    {user?.role === \"admin\" && (\n                      <p className=\"text-xs font-semibold text-blue-600 dark:text-blue-400\" data-testid=\"text-role\">\n                        Administrator\n                      </p>\n                    )}\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                \n                {/* Mobile Navigation */}\n                <div className=\"md:hidden\">\n                  {navigation.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <DropdownMenuItem key={item.name} asChild>\n                        <Link href={item.href}>\n                          <a className=\"flex items-center w-full\" data-testid={`mobile-link-${item.name.toLowerCase().replace(' ', '-')}`}>\n                            <Icon className=\"mr-2 h-4 w-4\" />\n                            <span>{item.name}</span>\n                          </a>\n                        </Link>\n                      </DropdownMenuItem>\n                    );\n                  })}\n                  <DropdownMenuSeparator />\n                </div>\n                \n                <DropdownMenuItem \n                  onClick={() => window.location.href = \"/api/logout\"}\n                  className=\"text-red-600 dark:text-red-400\"\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sign Out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}",
      "size_bytes": 5907
    },
    "client/src/hooks/useAuth.ts": {
      "content": "import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}",
      "size_bytes": 306
    },
    "client/src/lib/authUtils.ts": {
      "content": "export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}",
      "size_bytes": 115
    },
    "client/src/pages/admin.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Download, Search, Users, FileText, CheckCircle, Clock, AlertCircle, Eye, FileDown, UserCog, Shield, UserX, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"all\");\n  const [selectedCase, setSelectedCase] = useState<any>(null);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [isExporting, setIsExporting] = useState<string | null>(null);\n  const [userSearchTerm, setUserSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [isChangingRole, setIsChangingRole] = useState<string | null>(null);\n  const [isDeletingCase, setIsDeletingCase] = useState<string | null>(null);\n  const [isDeletingUser, setIsDeletingUser] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Handle individual case view\n  const handleViewCase = (caseItem: any) => {\n    setSelectedCase(caseItem);\n    setIsViewModalOpen(true);\n  };\n\n  // Handle individual case export\n  const handleExportCase = async (caseItem: any) => {\n    if (!caseItem.id) return;\n    \n    setIsExporting(caseItem.id);\n    try {\n      const response = await fetch(`/api/cases/${caseItem.id}/report`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to generate case report\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `Case-Report-${caseItem.caseId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"Case report downloaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error exporting case:\", error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to export case report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(null);\n    }\n  };\n\n  // Fetch all cases for admin\n  const { data: cases = [], isLoading: casesLoading } = useQuery({\n    queryKey: [\"/api/admin/cases\"],\n  });\n\n  // Fetch system statistics\n  const { data: stats = {}, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  // Fetch all users for admin\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Delete case mutation\n  const deleteCaseMutation = useMutation({\n    mutationFn: async (caseId: string) => {\n      return apiRequest(`/api/admin/cases/${caseId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/cases'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Case deleted successfully\",\n        description: \"The case has been permanently deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error deleting case:\", error);\n      toast({\n        title: \"Failed to delete case\",\n        description: error?.message || \"An error occurred while deleting the case.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"User deleted successfully\",\n        description: \"The user and all their data have been permanently deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error deleting user:\", error);\n      toast({\n        title: \"Failed to delete user\",\n        description: error?.message || \"An error occurred while deleting the user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle case deletion\n  const handleDeleteCase = async (caseId: string) => {\n    deleteCaseMutation.mutate(caseId);\n  };\n\n  // Handle user deletion\n  const handleDeleteUser = async (userId: string) => {\n    deleteUserMutation.mutate(userId);\n  };\n\n  // Handle user role changes\n  const handlePromoteUser = async (userId: string, userEmail: string) => {\n    setIsChangingRole(userId);\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/promote`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to promote user\");\n      }\n\n      const result = await response.json();\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      \n      toast({\n        title: \"Success\",\n        description: `${userEmail} has been promoted to admin`,\n      });\n    } catch (error) {\n      console.error(\"Error promoting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsChangingRole(null);\n    }\n  };\n\n  const handleDemoteUser = async (userId: string, userEmail: string) => {\n    setIsChangingRole(userId);\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/demote`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to demote user\");\n      }\n\n      const result = await response.json();\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      \n      toast({\n        title: \"Success\",\n        description: `${userEmail} has been demoted to user`,\n      });\n    } catch (error) {\n      console.error(\"Error demoting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsChangingRole(null);\n    }\n  };\n\n  // Filter cases based on search and filters\n  const filteredCases = cases?.filter((caseItem: any) => {\n    // Search filter\n    const matchesSearch = searchTerm === \"\" || \n      caseItem.caseId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      caseItem.user?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      caseItem.patientId?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Status filter\n    const matchesStatus = statusFilter === \"all\" || caseItem.status === statusFilter;\n\n    // Date filter\n    let matchesDate = true;\n    if (dateFilter !== \"all\" && caseItem.createdAt) {\n      const caseDate = new Date(caseItem.createdAt);\n      const now = new Date();\n      \n      switch (dateFilter) {\n        case \"today\":\n          matchesDate = caseDate.toDateString() === now.toDateString();\n          break;\n        case \"week\":\n          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          matchesDate = caseDate >= weekAgo;\n          break;\n        case \"month\":\n          const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          matchesDate = caseDate >= monthAgo;\n          break;\n      }\n    }\n\n    return matchesSearch && matchesStatus && matchesDate;\n  });\n\n  // Filter users based on search and role filters\n  const filteredUsers = users?.filter((user: any) => {\n    // Search filter\n    const matchesSearch = userSearchTerm === \"\" || \n      user.email?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n      user.firstName?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n      user.lastName?.toLowerCase().includes(userSearchTerm.toLowerCase());\n\n    // Role filter\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n\n    return matchesSearch && matchesRole;\n  });\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return (\n          <Badge className=\"bg-blue-100 text-blue-800\" data-testid={`badge-role-${role}`}>\n            <Shield className=\"w-3 h-3 mr-1\" />\n            Admin\n          </Badge>\n        );\n      case \"user\":\n        return (\n          <Badge variant=\"outline\" data-testid={`badge-role-${role}`}>\n            <Users className=\"w-3 h-3 mr-1\" />\n            User\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\" data-testid={`badge-role-${role}`}>\n            {role}\n          </Badge>\n        );\n    }\n  };\n\n  // Export cases as CSV\n  const handleExportCSV = async () => {\n    try {\n      const response = await fetch(\"/api/admin/export/cases\", {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to export cases\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `cases-export-${new Date().toISOString().split(\"T\")[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error exporting cases:\", error);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800\" data-testid={`badge-status-${status}`}>\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Completed\n          </Badge>\n        );\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\" data-testid={`badge-status-${status}`}>\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\" data-testid={`badge-status-${status}`}>\n            {status}\n          </Badge>\n        );\n    }\n  };\n\n  const getUrgencyBadge = (diagnoses: any[]) => {\n    if (!diagnoses || diagnoses.length === 0) return null;\n    \n    const hasUrgent = diagnoses.some(d => d.isUrgent);\n    if (hasUrgent) {\n      return (\n        <Badge variant=\"destructive\" data-testid=\"badge-urgent\">\n          <AlertCircle className=\"w-3 h-3 mr-1\" />\n          Urgent\n        </Badge>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"title-admin-panel\">Admin Panel</h1>\n          <p className=\"text-muted-foreground\">Manage all cases and view system statistics</p>\n        </div>\n        <Button onClick={handleExportCSV} data-testid=\"button-export-csv\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {statsLoading ? (\n          <>\n            <Skeleton className=\"h-24\" />\n            <Skeleton className=\"h-24\" />\n            <Skeleton className=\"h-24\" />\n            <Skeleton className=\"h-24\" />\n          </>\n        ) : (\n          <>\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardDescription>Total Cases</CardDescription>\n                <CardTitle className=\"text-2xl\" data-testid=\"stat-total-cases\">\n                  {stats?.totalCases || 0}\n                </CardTitle>\n              </CardHeader>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardDescription>Pending Cases</CardDescription>\n                <CardTitle className=\"text-2xl text-yellow-600\" data-testid=\"stat-pending-cases\">\n                  {stats?.pendingCases || 0}\n                </CardTitle>\n              </CardHeader>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardDescription>Active Users</CardDescription>\n                <CardTitle className=\"text-2xl\" data-testid=\"stat-active-users\">\n                  {stats?.activeUsers || 0} / {stats?.totalUsers || 0}\n                </CardTitle>\n              </CardHeader>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardDescription>Avg. Diagnosis Time</CardDescription>\n                <CardTitle className=\"text-2xl\" data-testid=\"stat-avg-diagnosis-time\">\n                  {stats?.avgDiagnosisTime || 0} min\n                </CardTitle>\n              </CardHeader>\n            </Card>\n          </>\n        )}\n      </div>\n\n      {/* Main Content - Tabbed Interface */}\n      <Tabs defaultValue=\"cases\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"cases\" data-testid=\"tab-cases\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Case Management\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            <UserCog className=\"w-4 h-4 mr-2\" />\n            User Management\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Cases Tab */}\n        <TabsContent value=\"cases\" className=\"space-y-6\">\n          {/* Case Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Filter Cases</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search by Case ID, Email, or Patient ID...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-8\"\n                      data-testid=\"input-search-cases\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={dateFilter} onValueChange={setDateFilter}>\n                  <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-filter\">\n                    <SelectValue placeholder=\"Filter by date\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Time</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">Last 7 Days</SelectItem>\n                    <SelectItem value=\"month\">Last 30 Days</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Cases Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>All Cases</CardTitle>\n              <CardDescription>\n                {filteredCases?.length || 0} cases found\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {casesLoading ? (\n                <div className=\"space-y-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-12 w-full\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Case ID</TableHead>\n                      <TableHead>User</TableHead>\n                      <TableHead>Patient ID</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Top Diagnosis</TableHead>\n                      <TableHead>Confidence</TableHead>\n                      <TableHead>Urgency</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCases && filteredCases.length > 0 ? (\n                      filteredCases.map((caseItem: any) => {\n                        const topDiagnosis = caseItem.finalDiagnoses?.[0];\n                        return (\n                          <TableRow key={caseItem.id} data-testid={`row-case-${caseItem.id}`}>\n                            <TableCell className=\"font-medium\">\n                              {caseItem.caseId}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Users className=\"w-4 h-4 text-muted-foreground\" />\n                                <span className=\"text-sm\">\n                                  {caseItem.user?.email || \"Unknown\"}\n                                </span>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              {caseItem.patientId || \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              {getStatusBadge(caseItem.status)}\n                            </TableCell>\n                            <TableCell>\n                              {caseItem.createdAt\n                                ? format(new Date(caseItem.createdAt), \"MMM dd, yyyy\")\n                                : \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              {topDiagnosis?.name || \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              {topDiagnosis ? (\n                                <div className=\"flex items-center gap-2\">\n                                  <div \n                                    className={cn(\n                                      \"w-full bg-gray-200 rounded-full h-2\",\n                                      \"relative overflow-hidden\"\n                                    )}\n                                  >\n                                    <div\n                                      className={cn(\n                                        \"h-full transition-all\",\n                                        topDiagnosis.confidence >= 70\n                                          ? \"bg-green-500\"\n                                          : topDiagnosis.confidence >= 40\n                                          ? \"bg-yellow-500\"\n                                          : \"bg-red-500\"\n                                      )}\n                                      style={{ width: `${topDiagnosis.confidence}%` }}\n                                    />\n                                  </div>\n                                  <span className=\"text-sm font-medium\">\n                                    {topDiagnosis.confidence}%\n                                  </span>\n                                </div>\n                              ) : (\n                                \"N/A\"\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {getUrgencyBadge(caseItem.finalDiagnoses)}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleViewCase(caseItem)}\n                                  data-testid={`button-view-case-${caseItem.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  View\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleExportCase(caseItem)}\n                                  disabled={isExporting === caseItem.id}\n                                  data-testid={`button-export-case-${caseItem.id}`}\n                                >\n                                  <FileDown className=\"w-4 h-4 mr-1\" />\n                                  {isExporting === caseItem.id ? \"Exporting...\" : \"Export\"}\n                                </Button>\n                                <AlertDialog>\n                                  <AlertDialogTrigger asChild>\n                                    <Button\n                                      variant=\"destructive\"\n                                      size=\"sm\"\n                                      disabled={deleteCaseMutation.isPending}\n                                      data-testid={`button-delete-case-${caseItem.id}`}\n                                    >\n                                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                                      Delete\n                                    </Button>\n                                  </AlertDialogTrigger>\n                                  <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                      <AlertDialogTitle>Delete Case</AlertDialogTitle>\n                                      <AlertDialogDescription>\n                                        Are you sure you want to delete case {caseItem.caseId}? \n                                        This action cannot be undone and will permanently remove all case data.\n                                      </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                      <AlertDialogAction\n                                        onClick={() => handleDeleteCase(caseItem.id)}\n                                        data-testid={`confirm-delete-case-${caseItem.id}`}\n                                        className=\"bg-red-600 hover:bg-red-700\"\n                                      >\n                                        Delete Case\n                                      </AlertDialogAction>\n                                    </AlertDialogFooter>\n                                  </AlertDialogContent>\n                                </AlertDialog>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })\n                    ) : (\n                      <TableRow>\n                        <TableCell colSpan={9} className=\"text-center py-8\">\n                          <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n                          <p className=\"text-muted-foreground\">No cases found</p>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Users Tab */}\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          {/* User Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Filter Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search by Email, First Name, or Last Name...\"\n                      value={userSearchTerm}\n                      onChange={(e) => setUserSearchTerm(e.target.value)}\n                      className=\"pl-8\"\n                      data-testid=\"input-search-users\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={roleFilter} onValueChange={setRoleFilter}>\n                  <SelectTrigger className=\"w-[180px]\" data-testid=\"select-role-filter\">\n                    <SelectValue placeholder=\"Filter by role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Roles</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"user\">User</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Users Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>All Users</CardTitle>\n              <CardDescription>\n                {filteredUsers?.length || 0} users found\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div className=\"space-y-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-12 w-full\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers && filteredUsers.length > 0 ? (\n                      filteredUsers.map((user: any) => {\n                        const fullName = [user.firstName, user.lastName].filter(Boolean).join(\" \") || \"N/A\";\n                        return (\n                          <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                            <TableCell className=\"font-medium\">\n                              {user.email}\n                            </TableCell>\n                            <TableCell>{fullName}</TableCell>\n                            <TableCell>\n                              {getRoleBadge(user.role)}\n                            </TableCell>\n                            <TableCell>\n                              {user.createdAt\n                                ? format(new Date(user.createdAt), \"MMM dd, yyyy\")\n                                : \"N/A\"}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-2\">\n                                {user.role !== \"admin\" ? (\n                                  <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        disabled={isChangingRole === user.id}\n                                        data-testid={`button-promote-user-${user.id}`}\n                                      >\n                                        <Shield className=\"w-4 h-4 mr-1\" />\n                                        Promote\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Promote User to Admin</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          Are you sure you want to promote {user.email} to admin? \n                                          This will give them full administrative privileges.\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction\n                                          onClick={() => handlePromoteUser(user.id, user.email)}\n                                          data-testid={`confirm-promote-${user.id}`}\n                                        >\n                                          Promote to Admin\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                ) : (\n                                  <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        disabled={isChangingRole === user.id}\n                                        data-testid={`button-demote-user-${user.id}`}\n                                      >\n                                        <UserX className=\"w-4 h-4 mr-1\" />\n                                        Demote\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Demote Admin to User</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          Are you sure you want to demote {user.email} from admin? \n                                          This will remove their administrative privileges.\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction\n                                          onClick={() => handleDemoteUser(user.id, user.email)}\n                                          data-testid={`confirm-demote-${user.id}`}\n                                        >\n                                          Demote to User\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                )}\n                                <AlertDialog>\n                                  <AlertDialogTrigger asChild>\n                                    <Button\n                                      variant=\"destructive\"\n                                      size=\"sm\"\n                                      disabled={deleteUserMutation.isPending}\n                                      data-testid={`button-delete-user-${user.id}`}\n                                    >\n                                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                                      Delete\n                                    </Button>\n                                  </AlertDialogTrigger>\n                                  <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                      <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                      <AlertDialogDescription>\n                                        Are you sure you want to delete {user.email}? \n                                        This action cannot be undone and will permanently remove the user and all their data.\n                                      </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                      <AlertDialogAction\n                                        onClick={() => handleDeleteUser(user.id)}\n                                        data-testid={`confirm-delete-user-${user.id}`}\n                                        className=\"bg-red-600 hover:bg-red-700\"\n                                      >\n                                        Delete User\n                                      </AlertDialogAction>\n                                    </AlertDialogFooter>\n                                  </AlertDialogContent>\n                                </AlertDialog>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })\n                    ) : (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-8\">\n                          <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n                          <p className=\"text-muted-foreground\">No users found</p>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Case View Modal */}\n      <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Case Details</DialogTitle>\n            <DialogDescription>\n              Comprehensive view of case {selectedCase?.caseId}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedCase && (\n            <div className=\"space-y-6\" data-testid=\"case-details-content\">\n              {/* Case Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Case Information</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><span className=\"font-medium\">Case ID:</span> {selectedCase.caseId}</p>\n                    <p><span className=\"font-medium\">User:</span> {selectedCase.user?.email || 'Unknown'}</p>\n                    <p><span className=\"font-medium\">Patient ID:</span> {selectedCase.patientId || 'N/A'}</p>\n                    <p><span className=\"font-medium\">Status:</span> {getStatusBadge(selectedCase.status)}</p>\n                    <p><span className=\"font-medium\">Date:</span> {selectedCase.createdAt ? format(new Date(selectedCase.createdAt), \"PPpp\") : 'N/A'}</p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold mb-2\">Clinical Information</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><span className=\"font-medium\">Lesion Location:</span> {selectedCase.lesionLocation || 'Not specified'}</p>\n                    <p><span className=\"font-medium\">Symptoms:</span> {selectedCase.symptoms || 'None reported'}</p>\n                    {selectedCase.medicalHistory && selectedCase.medicalHistory.length > 0 && (\n                      <p><span className=\"font-medium\">Medical History:</span> {selectedCase.medicalHistory.join(', ')}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Case Image */}\n              {selectedCase.imageUrl && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Case Image</h3>\n                  <div className=\"border rounded-lg p-4 bg-gray-50\">\n                    <img \n                      src={selectedCase.imageUrl.startsWith('https://storage.googleapis.com') \n                        ? `/objects/${selectedCase.imageUrl.split('/.private/')[1]}`\n                        : selectedCase.imageUrl\n                      } \n                      alt=\"Case image\" \n                      className=\"max-w-full h-64 object-contain mx-auto rounded\"\n                      data-testid=\"case-image\"\n                      onError={(e) => {\n                        console.error(\"Failed to load image:\", selectedCase.imageUrl);\n                        e.currentTarget.style.display = 'none';\n                      }}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* AI Diagnosis Results */}\n              {selectedCase.finalDiagnoses && selectedCase.finalDiagnoses.length > 0 && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">AI Diagnosis Results</h3>\n                  <div className=\"space-y-3\">\n                    {selectedCase.finalDiagnoses.map((diagnosis: any, index: number) => (\n                      <Card key={index} className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-medium text-lg\">{diagnosis.name}</h4>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"text-sm font-medium\">{diagnosis.confidence}%</div>\n                            {diagnosis.isUrgent && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                <AlertCircle className=\"w-3 h-3 mr-1\" />\n                                Urgent\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-sm text-gray-600 mb-3\">{diagnosis.description}</p>\n                        \n                        {diagnosis.keyFeatures && diagnosis.keyFeatures.length > 0 && (\n                          <div className=\"mb-2\">\n                            <span className=\"font-medium text-sm\">Key Features:</span>\n                            <div className=\"flex flex-wrap gap-1 mt-1\">\n                              {diagnosis.keyFeatures.map((feature: string, idx: number) => (\n                                <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                  {feature}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {diagnosis.recommendations && diagnosis.recommendations.length > 0 && (\n                          <div>\n                            <span className=\"font-medium text-sm\">Recommendations:</span>\n                            <ul className=\"list-disc list-inside text-sm text-gray-600 mt-1\">\n                              {diagnosis.recommendations.map((rec: string, idx: number) => (\n                                <li key={idx}>{rec}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}",
      "size_bytes": 41787
    },
    "client/src/pages/landing.tsx": {
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Stethoscope, Shield, Brain, Clock, FileText, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <div className=\"flex justify-center mb-6\">\n            <Stethoscope className=\"h-16 w-16 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h1 className=\"text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            AI-Powered Medical Diagnosis\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Advanced dermatological analysis using state-of-the-art AI models to assist healthcare professionals in diagnosis\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-login\"\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg\"\n          >\n            Sign In with Replit\n          </Button>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-8 mt-16\">\n          <Card data-testid=\"card-feature-ai\">\n            <CardHeader>\n              <Brain className=\"h-10 w-10 text-blue-600 dark:text-blue-400 mb-2\" />\n              <CardTitle>Dual AI Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Leverages both Google Gemini and OpenAI models for comprehensive and accurate diagnosis with confidence scores\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-security\">\n            <CardHeader>\n              <Shield className=\"h-10 w-10 text-green-600 dark:text-green-400 mb-2\" />\n              <CardTitle>Secure & Private</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                HIPAA-compliant data handling with encrypted storage and user authentication to protect patient information\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-reports\">\n            <CardHeader>\n              <FileText className=\"h-10 w-10 text-purple-600 dark:text-purple-400 mb-2\" />\n              <CardTitle>Detailed Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Generate comprehensive PDF reports with diagnosis results, recommendations, and urgency indicators\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-history\">\n            <CardHeader>\n              <Clock className=\"h-10 w-10 text-orange-600 dark:text-orange-400 mb-2\" />\n              <CardTitle>Case History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Track and review all previous cases with complete analysis history and patient information\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-patient\">\n            <CardHeader>\n              <Users className=\"h-10 w-10 text-indigo-600 dark:text-indigo-400 mb-2\" />\n              <CardTitle>Patient Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Efficiently manage patient records with detailed medical history and demographic information\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-feature-urgent\">\n            <CardHeader>\n              <Shield className=\"h-10 w-10 text-red-600 dark:text-red-400 mb-2\" />\n              <CardTitle>Urgency Detection</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Automatically identifies conditions requiring immediate medical attention with clear visual indicators\n              </CardDescription>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-16 p-8 bg-blue-50 dark:bg-gray-800 rounded-lg\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n            Ready to Get Started?\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-6\">\n            Sign in with your Replit account to access the full diagnostic platform\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-get-started\"\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg\"\n          >\n            Get Started Now\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 5181
    },
    "client/src/providers/ThemeProvider.tsx": {
      "content": "import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ninterface ThemeContextValue {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Get initial theme from localStorage or default to system\n    const storedTheme = localStorage.getItem(\"theme\") as Theme;\n    return storedTheme || \"system\";\n  });\n\n  // Apply theme effect\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove(\"light\", \"dark\");\n    \n    // Apply new theme\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else if (theme === \"light\") {\n      // Light mode - ensure dark is removed\n      root.classList.remove(\"dark\");\n    } else {\n      // System theme - check system preference\n      const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      if (prefersDark) {\n        root.classList.add(\"dark\");\n      }\n    }\n    \n    // Store theme in localStorage\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  // Listen for system theme changes when theme is set to \"system\"\n  useEffect(() => {\n    if (theme !== \"system\") return;\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      const root = document.documentElement;\n      root.classList.remove(\"light\", \"dark\");\n      if (e.matches) {\n        root.classList.add(\"dark\");\n      }\n    };\n\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}",
      "size_bytes": 2154
    },
    "test-settings-final.js": {
      "content": "// Final test script to verify settings save functionality\n// Run this with: node test-settings-final.js\n\nconst http = require('http');\n\nfunction testSettingsSave() {\n  console.log('Testing settings save functionality...');\n  console.log('This test requires authentication, so it will likely fail with 401.');\n  console.log('Please test manually in the browser by:');\n  console.log('1. Navigate to http://localhost:5000/settings');\n  console.log('2. Change some settings (like theme or confidence threshold)');\n  console.log('3. Click the \"Save Settings\" button');\n  console.log('4. You should see a success toast \"Settings saved\"');\n  console.log('\\nThe fix applied:');\n  console.log('- Changed apiRequest calls from apiRequest(url, {method, body}) to apiRequest(method, url, data)');\n  console.log('- Fixed both settings.tsx and profile.tsx');\n  console.log('- Added comprehensive error logging to identify issues');\n  console.log('\\nThe settings save should now work correctly!');\n}\n\ntestSettingsSave();",
      "size_bytes": 1006
    },
    "test-settings.js": {
      "content": "// Test script to verify settings save functionality\nasync function testSettingsSave() {\n  const apiUrl = 'http://localhost:5000';\n  \n  // First, get the current settings\n  try {\n    console.log('Testing settings save functionality...');\n    \n    // Test data for settings update\n    const settingsData = {\n      useGemini: true,\n      useOpenAI: false,\n      confidenceThreshold: 50,\n      autoSaveCases: true,\n      anonymizeData: false,\n      dataRetention: \"180\",\n      theme: \"dark\",\n      compactMode: false,\n      analysisNotifications: true,\n      urgentAlerts: true,\n      soundNotifications: false\n    };\n    \n    // Note: This won't work without authentication, but will help identify the error\n    const response = await fetch(`${apiUrl}/api/settings`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(settingsData),\n      credentials: 'include'\n    });\n    \n    console.log('Response status:', response.status);\n    const data = await response.json();\n    console.log('Response data:', data);\n    \n  } catch (error) {\n    console.error('Test failed:', error);\n  }\n}\n\ntestSettingsSave();",
      "size_bytes": 1170
    },
    "client/src/test-settings.js": {
      "content": "// Browser console script to test settings save\n// Copy and paste this into the browser console on the /settings page\n\nasync function testSettingsSave() {\n  console.log('Testing settings save...');\n  \n  const settingsData = {\n    useGemini: true,\n    useOpenAI: false,\n    confidenceThreshold: 55,\n    autoSaveCases: true,\n    anonymizeData: false,\n    dataRetention: \"60\",\n    theme: \"light\",\n    compactMode: false,\n    analysisNotifications: true,\n    urgentAlerts: true,\n    soundNotifications: false\n  };\n  \n  try {\n    const response = await fetch('/api/settings', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(settingsData),\n      credentials: 'include'\n    });\n    \n    console.log('Response status:', response.status);\n    const data = await response.json();\n    console.log('Response data:', data);\n    \n    if (!response.ok) {\n      console.error('Settings save failed:', data);\n    } else {\n      console.log('Settings saved successfully!', data);\n    }\n  } catch (error) {\n    console.error('Test failed:', error);\n  }\n}\n\n// Run this in the browser console\nconsole.log('To test settings save, run: testSettingsSave()');\nwindow.testSettingsSave = testSettingsSave;",
      "size_bytes": 1250
    },
    "client/src/components/AnalysisProgress.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Brain, Microscope, Zap, CheckCircle } from \"lucide-react\";\n\ninterface AnalysisStage {\n  id: string;\n  text: string;\n  startPercent: number;\n  endPercent: number;\n  icon: React.ReactNode;\n  duration: number; // in milliseconds\n}\n\ninterface AnalysisProgressProps {\n  isActive: boolean;\n  onComplete?: () => void;\n}\n\nconst analysisStages: AnalysisStage[] = [\n  {\n    id: \"upload\",\n    text: \"Görüntü yükleniyor...\",\n    startPercent: 0,\n    endPercent: 10,\n    icon: <Microscope className=\"h-5 w-5 text-blue-500\" />,\n    duration: 8000\n  },\n  {\n    id: \"prepare\",\n    text: \"AI modelleri hazırlanıyor...\",\n    startPercent: 10,\n    endPercent: 20,\n    icon: <Brain className=\"h-5 w-5 text-purple-500\" />,\n    duration: 6000\n  },\n  {\n    id: \"gemini\",\n    text: \"Gemini analizi başlıyor...\",\n    startPercent: 20,\n    endPercent: 50,\n    icon: <Zap className=\"h-5 w-5 text-green-500\" />,\n    duration: 20000\n  },\n  {\n    id: \"openai\",\n    text: \"OpenAI analizi başlıyor...\",\n    startPercent: 50,\n    endPercent: 80,\n    icon: <Brain className=\"h-5 w-5 text-orange-500\" />,\n    duration: 18000\n  },\n  {\n    id: \"combine\",\n    text: \"Sonuçlar birleştiriliyor...\",\n    startPercent: 80,\n    endPercent: 95,\n    icon: <CheckCircle className=\"h-5 w-5 text-indigo-500\" />,\n    duration: 6000\n  },\n  {\n    id: \"complete\",\n    text: \"Analiz tamamlanıyor...\",\n    startPercent: 95,\n    endPercent: 100,\n    icon: <CheckCircle className=\"h-5 w-5 text-green-600\" />,\n    duration: 2000\n  }\n];\n\nexport function AnalysisProgress({ isActive, onComplete }: AnalysisProgressProps) {\n  const [progress, setProgress] = useState(0);\n  const [currentStageIndex, setCurrentStageIndex] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(60);\n\n  useEffect(() => {\n    if (!isActive) {\n      setProgress(0);\n      setCurrentStageIndex(0);\n      setTimeRemaining(60);\n      return;\n    }\n\n    let totalElapsed = 0;\n    const totalDuration = analysisStages.reduce((sum, stage) => sum + stage.duration, 0);\n    \n    const progressInterval = setInterval(() => {\n      totalElapsed += 200; // Update every 200ms for smooth animation\n      \n      // Calculate which stage we're in\n      let stageElapsed = 0;\n      let currentStage = 0;\n      \n      for (let i = 0; i < analysisStages.length; i++) {\n        if (totalElapsed <= stageElapsed + analysisStages[i].duration) {\n          currentStage = i;\n          break;\n        }\n        stageElapsed += analysisStages[i].duration;\n      }\n      \n      setCurrentStageIndex(currentStage);\n      \n      // Calculate progress within current stage\n      const stage = analysisStages[currentStage];\n      const stageProgress = Math.min((totalElapsed - stageElapsed) / stage.duration, 1);\n      const currentProgress = stage.startPercent + (stage.endPercent - stage.startPercent) * stageProgress;\n      \n      setProgress(Math.min(currentProgress, 100));\n      \n      // Calculate time remaining\n      const remainingTime = Math.max(0, Math.ceil((totalDuration - totalElapsed) / 1000));\n      setTimeRemaining(remainingTime);\n      \n      // Complete when we reach 100%\n      if (currentProgress >= 100) {\n        clearInterval(progressInterval);\n        if (onComplete) {\n          setTimeout(onComplete, 500); // Small delay for visual completion\n        }\n      }\n    }, 200);\n\n    return () => clearInterval(progressInterval);\n  }, [isActive, onComplete]);\n\n  if (!isActive) {\n    return null;\n  }\n\n  const currentStage = analysisStages[currentStageIndex];\n\n  return (\n    <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 border border-blue-200 dark:border-blue-800 shadow-lg\">\n      <CardContent className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"animate-pulse\">\n              {currentStage.icon}\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              AI Analizi Devam Ediyor\n            </h3>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Lütfen bekleyin, analiz {timeRemaining} saniye içinde tamamlanacak\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium text-foreground\">\n              İlerleme\n            </span>\n            <span className=\"text-sm font-semibold text-primary\">\n              {Math.round(progress)}%\n            </span>\n          </div>\n          <Progress \n            value={progress} \n            className=\"h-3 bg-gray-200 dark:bg-gray-700\"\n            data-testid=\"progress-analysis\"\n          />\n        </div>\n\n        {/* Current Stage */}\n        <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-4 border border-blue-100 dark:border-blue-900\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"animate-bounce\">\n              {currentStage.icon}\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-current-stage\">\n                {currentStage.text}\n              </p>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-2\">\n                <div \n                  className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-1.5 rounded-full transition-all duration-300 ease-out\"\n                  style={{ \n                    width: `${((progress - currentStage.startPercent) / (currentStage.endPercent - currentStage.startPercent)) * 100}%` \n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Stage List */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3\">Analiz Aşamaları:</h4>\n          <div className=\"space-y-2\">\n            {analysisStages.map((stage, index) => {\n              const isCompleted = progress >= stage.endPercent;\n              const isCurrent = index === currentStageIndex;\n              const isPending = progress < stage.startPercent;\n\n              return (\n                <div \n                  key={stage.id}\n                  className={`flex items-center space-x-3 p-2 rounded-md transition-all duration-300 ${\n                    isCurrent \n                      ? 'bg-blue-100 dark:bg-blue-900/30 border border-blue-300 dark:border-blue-700' \n                      : isCompleted\n                        ? 'bg-green-50 dark:bg-green-900/20'\n                        : 'bg-gray-50 dark:bg-gray-800/50'\n                  }`}\n                  data-testid={`stage-${stage.id}`}\n                >\n                  <div className={`transition-all duration-300 ${\n                    isCompleted ? 'text-green-600' : isCurrent ? 'animate-pulse' : 'text-gray-400'\n                  }`}>\n                    {isCompleted ? (\n                      <CheckCircle className=\"h-4 w-4\" />\n                    ) : (\n                      stage.icon\n                    )}\n                  </div>\n                  <span className={`text-sm transition-all duration-300 ${\n                    isCurrent \n                      ? 'font-medium text-blue-700 dark:text-blue-300' \n                      : isCompleted\n                        ? 'text-green-700 dark:text-green-400'\n                        : 'text-gray-500 dark:text-gray-400'\n                  }`}>\n                    {stage.text}\n                  </span>\n                  {isCompleted && (\n                    <div className=\"ml-auto\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Estimated Time */}\n        <div className=\"text-center p-3 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <p className=\"text-sm text-muted-foreground\">\n            Tahmini kalan süre: <span className=\"font-semibold text-primary\">{timeRemaining} saniye</span>\n          </p>\n          <div className=\"flex justify-center mt-2\">\n            <div className=\"flex space-x-1\">\n              {[...Array(3)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"\n                  style={{ animationDelay: `${i * 0.2}s` }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}",
      "size_bytes": 8977
    }
  },
  "version": 1
}
